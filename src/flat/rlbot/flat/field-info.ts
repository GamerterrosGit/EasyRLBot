// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BoostPad, BoostPadT } from '../../rlbot/flat/boost-pad';
import { GoalInfo, GoalInfoT } from '../../rlbot/flat/goal-info';


export class FieldInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FieldInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFieldInfo(bb:flatbuffers.ByteBuffer, obj?:FieldInfo):FieldInfo {
  return (obj || new FieldInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFieldInfo(bb:flatbuffers.ByteBuffer, obj?:FieldInfo):FieldInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FieldInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

boostPads(index: number, obj?:BoostPad):BoostPad|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BoostPad()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

boostPadsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

goals(index: number, obj?:GoalInfo):GoalInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GoalInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

goalsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFieldInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBoostPads(builder:flatbuffers.Builder, boostPadsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, boostPadsOffset, 0);
}

static createBoostPadsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBoostPadsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGoals(builder:flatbuffers.Builder, goalsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, goalsOffset, 0);
}

static createGoalsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startGoalsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFieldInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFieldInfo(builder:flatbuffers.Builder, boostPadsOffset:flatbuffers.Offset, goalsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FieldInfo.startFieldInfo(builder);
  FieldInfo.addBoostPads(builder, boostPadsOffset);
  FieldInfo.addGoals(builder, goalsOffset);
  return FieldInfo.endFieldInfo(builder);
}

unpack(): FieldInfoT {
  return new FieldInfoT(
    this.bb!.createObjList(this.boostPads.bind(this), this.boostPadsLength()),
    this.bb!.createObjList(this.goals.bind(this), this.goalsLength())
  );
}


unpackTo(_o: FieldInfoT): void {
  _o.boostPads = this.bb!.createObjList(this.boostPads.bind(this), this.boostPadsLength());
  _o.goals = this.bb!.createObjList(this.goals.bind(this), this.goalsLength());
}
}

export class FieldInfoT {
constructor(
  public boostPads: (BoostPadT)[] = [],
  public goals: (GoalInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const boostPads = FieldInfo.createBoostPadsVector(builder, builder.createObjectOffsetList(this.boostPads));
  const goals = FieldInfo.createGoalsVector(builder, builder.createObjectOffsetList(this.goals));

  return FieldInfo.createFieldInfo(builder,
    boostPads,
    goals
  );
}
}
