// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BoxShape, BoxShapeT } from '../../rlbot/flat/box-shape';
import { Physics, PhysicsT } from '../../rlbot/flat/physics';
import { ScoreInfo, ScoreInfoT } from '../../rlbot/flat/score-info';
import { Vector3, Vector3T } from '../../rlbot/flat/vector3';


export class PlayerInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerInfo(bb:flatbuffers.ByteBuffer, obj?:PlayerInfo):PlayerInfo {
  return (obj || new PlayerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerInfo(bb:flatbuffers.ByteBuffer, obj?:PlayerInfo):PlayerInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

physics(obj?:Physics):Physics|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Physics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

scoreInfo(obj?:ScoreInfo):ScoreInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ScoreInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isDemolished():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
 */
hasWheelContact():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSupersonic():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isBot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
 */
jumped():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 *  True if player has double jumped. False does not mean you have a jump remaining, because the
 *  aerial timer can run out, and that doesn't affect this flag.
 */
doubleJumped():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

team():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boost():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hitbox(obj?:BoxShape):BoxShape|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new BoxShape()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hitboxOffset(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * In the case where the requested player index is not available, spawnId will help
 * the framework figure out what index was actually assigned to this player instead.
 */
spawnId():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPlayerInfo(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
}

static addScoreInfo(builder:flatbuffers.Builder, scoreInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, scoreInfoOffset, 0);
}

static addIsDemolished(builder:flatbuffers.Builder, isDemolished:boolean) {
  builder.addFieldInt8(2, +isDemolished, +false);
}

static addHasWheelContact(builder:flatbuffers.Builder, hasWheelContact:boolean) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
}

static addIsSupersonic(builder:flatbuffers.Builder, isSupersonic:boolean) {
  builder.addFieldInt8(4, +isSupersonic, +false);
}

static addIsBot(builder:flatbuffers.Builder, isBot:boolean) {
  builder.addFieldInt8(5, +isBot, +false);
}

static addJumped(builder:flatbuffers.Builder, jumped:boolean) {
  builder.addFieldInt8(6, +jumped, +false);
}

static addDoubleJumped(builder:flatbuffers.Builder, doubleJumped:boolean) {
  builder.addFieldInt8(7, +doubleJumped, +false);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, nameOffset, 0);
}

static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(9, team, 0);
}

static addBoost(builder:flatbuffers.Builder, boost:number) {
  builder.addFieldInt32(10, boost, 0);
}

static addHitbox(builder:flatbuffers.Builder, hitboxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, hitboxOffset, 0);
}

static addHitboxOffset(builder:flatbuffers.Builder, hitboxOffsetOffset:flatbuffers.Offset) {
  builder.addFieldStruct(12, hitboxOffsetOffset, 0);
}

static addSpawnId(builder:flatbuffers.Builder, spawnId:number) {
  builder.addFieldInt32(13, spawnId, 0);
}

static endPlayerInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PlayerInfoT {
  return new PlayerInfoT(
    (this.physics() !== null ? this.physics()!.unpack() : null),
    (this.scoreInfo() !== null ? this.scoreInfo()!.unpack() : null),
    this.isDemolished(),
    this.hasWheelContact(),
    this.isSupersonic(),
    this.isBot(),
    this.jumped(),
    this.doubleJumped(),
    this.name(),
    this.team(),
    this.boost(),
    (this.hitbox() !== null ? this.hitbox()!.unpack() : null),
    (this.hitboxOffset() !== null ? this.hitboxOffset()!.unpack() : null),
    this.spawnId()
  );
}


unpackTo(_o: PlayerInfoT): void {
  _o.physics = (this.physics() !== null ? this.physics()!.unpack() : null);
  _o.scoreInfo = (this.scoreInfo() !== null ? this.scoreInfo()!.unpack() : null);
  _o.isDemolished = this.isDemolished();
  _o.hasWheelContact = this.hasWheelContact();
  _o.isSupersonic = this.isSupersonic();
  _o.isBot = this.isBot();
  _o.jumped = this.jumped();
  _o.doubleJumped = this.doubleJumped();
  _o.name = this.name();
  _o.team = this.team();
  _o.boost = this.boost();
  _o.hitbox = (this.hitbox() !== null ? this.hitbox()!.unpack() : null);
  _o.hitboxOffset = (this.hitboxOffset() !== null ? this.hitboxOffset()!.unpack() : null);
  _o.spawnId = this.spawnId();
}
}

export class PlayerInfoT {
constructor(
  public physics: PhysicsT|null = null,
  public scoreInfo: ScoreInfoT|null = null,
  public isDemolished: boolean = false,
  public hasWheelContact: boolean = false,
  public isSupersonic: boolean = false,
  public isBot: boolean = false,
  public jumped: boolean = false,
  public doubleJumped: boolean = false,
  public name: string|Uint8Array|null = null,
  public team: number = 0,
  public boost: number = 0,
  public hitbox: BoxShapeT|null = null,
  public hitboxOffset: Vector3T|null = null,
  public spawnId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const physics = (this.physics !== null ? this.physics!.pack(builder) : 0);
  const scoreInfo = (this.scoreInfo !== null ? this.scoreInfo!.pack(builder) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const hitbox = (this.hitbox !== null ? this.hitbox!.pack(builder) : 0);

  PlayerInfo.startPlayerInfo(builder);
  PlayerInfo.addPhysics(builder, physics);
  PlayerInfo.addScoreInfo(builder, scoreInfo);
  PlayerInfo.addIsDemolished(builder, this.isDemolished);
  PlayerInfo.addHasWheelContact(builder, this.hasWheelContact);
  PlayerInfo.addIsSupersonic(builder, this.isSupersonic);
  PlayerInfo.addIsBot(builder, this.isBot);
  PlayerInfo.addJumped(builder, this.jumped);
  PlayerInfo.addDoubleJumped(builder, this.doubleJumped);
  PlayerInfo.addName(builder, name);
  PlayerInfo.addTeam(builder, this.team);
  PlayerInfo.addBoost(builder, this.boost);
  PlayerInfo.addHitbox(builder, hitbox);
  PlayerInfo.addHitboxOffset(builder, (this.hitboxOffset !== null ? this.hitboxOffset!.pack(builder) : 0));
  PlayerInfo.addSpawnId(builder, this.spawnId);

  return PlayerInfo.endPlayerInfo(builder);
}
}
