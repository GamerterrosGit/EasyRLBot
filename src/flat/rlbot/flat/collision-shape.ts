// automatically generated by the FlatBuffers compiler, do not modify

import { BoxShape, BoxShapeT } from '../../rlbot/flat/box-shape';
import { CylinderShape, CylinderShapeT } from '../../rlbot/flat/cylinder-shape';
import { SphereShape, SphereShapeT } from '../../rlbot/flat/sphere-shape';


export enum CollisionShape {
  NONE = 0,
  BoxShape = 1,
  SphereShape = 2,
  CylinderShape = 3
}

export function unionToCollisionShape(
  type: CollisionShape,
  accessor: (obj:BoxShape|CylinderShape|SphereShape) => BoxShape|CylinderShape|SphereShape|null
): BoxShape|CylinderShape|SphereShape|null {
  switch(CollisionShape[type]) {
    case 'NONE': return null; 
    case 'BoxShape': return accessor(new BoxShape())! as BoxShape;
    case 'SphereShape': return accessor(new SphereShape())! as SphereShape;
    case 'CylinderShape': return accessor(new CylinderShape())! as CylinderShape;
    default: return null;
  }
}

export function unionListToCollisionShape(
  type: CollisionShape, 
  accessor: (index: number, obj:BoxShape|CylinderShape|SphereShape) => BoxShape|CylinderShape|SphereShape|null, 
  index: number
): BoxShape|CylinderShape|SphereShape|null {
  switch(CollisionShape[type]) {
    case 'NONE': return null; 
    case 'BoxShape': return accessor(index, new BoxShape())! as BoxShape;
    case 'SphereShape': return accessor(index, new SphereShape())! as SphereShape;
    case 'CylinderShape': return accessor(index, new CylinderShape())! as CylinderShape;
    default: return null;
  }
}
