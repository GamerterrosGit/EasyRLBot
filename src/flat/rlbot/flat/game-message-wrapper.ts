// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GameMessage, unionToGameMessage, unionListToGameMessage } from '../../rlbot/flat/game-message';
import { PlayerInputChange, PlayerInputChangeT } from '../../rlbot/flat/player-input-change';
import { PlayerSpectate, PlayerSpectateT } from '../../rlbot/flat/player-spectate';
import { PlayerStatEvent, PlayerStatEventT } from '../../rlbot/flat/player-stat-event';


export class GameMessageWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameMessageWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameMessageWrapper(bb:flatbuffers.ByteBuffer, obj?:GameMessageWrapper):GameMessageWrapper {
  return (obj || new GameMessageWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameMessageWrapper(bb:flatbuffers.ByteBuffer, obj?:GameMessageWrapper):GameMessageWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameMessageWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

MessageType():GameMessage {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GameMessage.NONE;
}

Message<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startGameMessageWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMessageType(builder:flatbuffers.Builder, MessageType:GameMessage) {
  builder.addFieldInt8(0, MessageType, GameMessage.NONE);
}

static addMessage(builder:flatbuffers.Builder, MessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, MessageOffset, 0);
}

static endGameMessageWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGameMessageWrapper(builder:flatbuffers.Builder, MessageType:GameMessage, MessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameMessageWrapper.startGameMessageWrapper(builder);
  GameMessageWrapper.addMessageType(builder, MessageType);
  GameMessageWrapper.addMessage(builder, MessageOffset);
  return GameMessageWrapper.endGameMessageWrapper(builder);
}

unpack(): GameMessageWrapperT {
  return new GameMessageWrapperT(
    this.MessageType(),
    (() => {
      let temp = unionToGameMessage(this.MessageType(), this.Message.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: GameMessageWrapperT): void {
  _o.MessageType = this.MessageType();
  _o.Message = (() => {
      let temp = unionToGameMessage(this.MessageType(), this.Message.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class GameMessageWrapperT {
constructor(
  public MessageType: GameMessage = GameMessage.NONE,
  public Message: PlayerInputChangeT|PlayerSpectateT|PlayerStatEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const Message = builder.createObjectOffset(this.Message);

  return GameMessageWrapper.createGameMessageWrapper(builder,
    this.MessageType,
    Message
  );
}
}
