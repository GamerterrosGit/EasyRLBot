// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DesiredPhysics, DesiredPhysicsT } from '../../rlbot/flat/desired-physics';


export class DesiredBallState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DesiredBallState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDesiredBallState(bb:flatbuffers.ByteBuffer, obj?:DesiredBallState):DesiredBallState {
  return (obj || new DesiredBallState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDesiredBallState(bb:flatbuffers.ByteBuffer, obj?:DesiredBallState):DesiredBallState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredBallState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

physics(obj?:DesiredPhysics):DesiredPhysics|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DesiredPhysics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDesiredBallState(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
}

static endDesiredBallState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDesiredBallState(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredBallState.startDesiredBallState(builder);
  DesiredBallState.addPhysics(builder, physicsOffset);
  return DesiredBallState.endDesiredBallState(builder);
}

unpack(): DesiredBallStateT {
  return new DesiredBallStateT(
    (this.physics() !== null ? this.physics()!.unpack() : null)
  );
}


unpackTo(_o: DesiredBallStateT): void {
  _o.physics = (this.physics() !== null ? this.physics()!.unpack() : null);
}
}

export class DesiredBallStateT {
constructor(
  public physics: DesiredPhysicsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const physics = (this.physics !== null ? this.physics!.pack(builder) : 0);

  return DesiredBallState.createDesiredBallState(builder,
    physics
  );
}
}
