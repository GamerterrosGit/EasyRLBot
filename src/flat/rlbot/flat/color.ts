// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Color {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Color {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

a():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

r():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

g():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

b():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startColor(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt8(0, a, 0);
}

static addR(builder:flatbuffers.Builder, r:number) {
  builder.addFieldInt8(1, r, 0);
}

static addG(builder:flatbuffers.Builder, g:number) {
  builder.addFieldInt8(2, g, 0);
}

static addB(builder:flatbuffers.Builder, b:number) {
  builder.addFieldInt8(3, b, 0);
}

static endColor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createColor(builder:flatbuffers.Builder, a:number, r:number, g:number, b:number):flatbuffers.Offset {
  Color.startColor(builder);
  Color.addA(builder, a);
  Color.addR(builder, r);
  Color.addG(builder, g);
  Color.addB(builder, b);
  return Color.endColor(builder);
}

unpack(): ColorT {
  return new ColorT(
    this.a(),
    this.r(),
    this.g(),
    this.b()
  );
}


unpackTo(_o: ColorT): void {
  _o.a = this.a();
  _o.r = this.r();
  _o.g = this.g();
  _o.b = this.b();
}
}

export class ColorT {
constructor(
  public a: number = 0,
  public r: number = 0,
  public g: number = 0,
  public b: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Color.createColor(builder,
    this.a,
    this.r,
    this.g,
    this.b
  );
}
}
