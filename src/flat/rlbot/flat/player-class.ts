// automatically generated by the FlatBuffers compiler, do not modify

import { HumanPlayer, HumanPlayerT } from '../../rlbot/flat/human-player';
import { PartyMemberBotPlayer, PartyMemberBotPlayerT } from '../../rlbot/flat/party-member-bot-player';
import { PsyonixBotPlayer, PsyonixBotPlayerT } from '../../rlbot/flat/psyonix-bot-player';
import { RLBotPlayer, RLBotPlayerT } from '../../rlbot/flat/rlbot-player';


export enum PlayerClass {
  NONE = 0,
  RLBotPlayer = 1,
  HumanPlayer = 2,
  PsyonixBotPlayer = 3,
  PartyMemberBotPlayer = 4
}

export function unionToPlayerClass(
  type: PlayerClass,
  accessor: (obj:HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer) => HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer|null
): HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer|null {
  switch(PlayerClass[type]) {
    case 'NONE': return null; 
    case 'RLBotPlayer': return accessor(new RLBotPlayer())! as RLBotPlayer;
    case 'HumanPlayer': return accessor(new HumanPlayer())! as HumanPlayer;
    case 'PsyonixBotPlayer': return accessor(new PsyonixBotPlayer())! as PsyonixBotPlayer;
    case 'PartyMemberBotPlayer': return accessor(new PartyMemberBotPlayer())! as PartyMemberBotPlayer;
    default: return null;
  }
}

export function unionListToPlayerClass(
  type: PlayerClass, 
  accessor: (index: number, obj:HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer) => HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer|null, 
  index: number
): HumanPlayer|PartyMemberBotPlayer|PsyonixBotPlayer|RLBotPlayer|null {
  switch(PlayerClass[type]) {
    case 'NONE': return null; 
    case 'RLBotPlayer': return accessor(index, new RLBotPlayer())! as RLBotPlayer;
    case 'HumanPlayer': return accessor(index, new HumanPlayer())! as HumanPlayer;
    case 'PsyonixBotPlayer': return accessor(index, new PsyonixBotPlayer())! as PsyonixBotPlayer;
    case 'PartyMemberBotPlayer': return accessor(index, new PartyMemberBotPlayer())! as PartyMemberBotPlayer;
    default: return null;
  }
}
