// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vector3, Vector3T } from '../../rlbot/flat/vector3';


export class Touch {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Touch {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTouch(bb:flatbuffers.ByteBuffer, obj?:Touch):Touch {
  return (obj || new Touch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTouch(bb:flatbuffers.ByteBuffer, obj?:Touch):Touch {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Touch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The name of the player involved with the touch.
 */
playerName():string|null
playerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
playerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Seconds that had elapsed in the game when the touch occurred.
 */
gameSeconds():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * The point of contact for the touch.
 */
location(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * The direction of the touch.
 */
normal(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * The Team which the touch belongs to, 0 for blue 1 for orange.
 */
team():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * The index of the player involved with the touch.
 */
playerIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTouch(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPlayerName(builder:flatbuffers.Builder, playerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerNameOffset, 0);
}

static addGameSeconds(builder:flatbuffers.Builder, gameSeconds:number) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, locationOffset, 0);
}

static addNormal(builder:flatbuffers.Builder, normalOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, normalOffset, 0);
}

static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(4, team, 0);
}

static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(5, playerIndex, 0);
}

static endTouch(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TouchT {
  return new TouchT(
    this.playerName(),
    this.gameSeconds(),
    (this.location() !== null ? this.location()!.unpack() : null),
    (this.normal() !== null ? this.normal()!.unpack() : null),
    this.team(),
    this.playerIndex()
  );
}


unpackTo(_o: TouchT): void {
  _o.playerName = this.playerName();
  _o.gameSeconds = this.gameSeconds();
  _o.location = (this.location() !== null ? this.location()!.unpack() : null);
  _o.normal = (this.normal() !== null ? this.normal()!.unpack() : null);
  _o.team = this.team();
  _o.playerIndex = this.playerIndex();
}
}

export class TouchT {
constructor(
  public playerName: string|Uint8Array|null = null,
  public gameSeconds: number = 0.0,
  public location: Vector3T|null = null,
  public normal: Vector3T|null = null,
  public team: number = 0,
  public playerIndex: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const playerName = (this.playerName !== null ? builder.createString(this.playerName!) : 0);

  Touch.startTouch(builder);
  Touch.addPlayerName(builder, playerName);
  Touch.addGameSeconds(builder, this.gameSeconds);
  Touch.addLocation(builder, (this.location !== null ? this.location!.pack(builder) : 0));
  Touch.addNormal(builder, (this.normal !== null ? this.normal!.pack(builder) : 0));
  Touch.addTeam(builder, this.team);
  Touch.addPlayerIndex(builder, this.playerIndex);

  return Touch.endTouch(builder);
}
}
