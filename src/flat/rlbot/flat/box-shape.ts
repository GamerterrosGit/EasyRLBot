// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class BoxShape {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BoxShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoxShape(bb:flatbuffers.ByteBuffer, obj?:BoxShape):BoxShape {
  return (obj || new BoxShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoxShape(bb:flatbuffers.ByteBuffer, obj?:BoxShape):BoxShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoxShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

length():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startBoxShape(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat32(0, length, 0.0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(1, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(2, height, 0.0);
}

static endBoxShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBoxShape(builder:flatbuffers.Builder, length:number, width:number, height:number):flatbuffers.Offset {
  BoxShape.startBoxShape(builder);
  BoxShape.addLength(builder, length);
  BoxShape.addWidth(builder, width);
  BoxShape.addHeight(builder, height);
  return BoxShape.endBoxShape(builder);
}

unpack(): BoxShapeT {
  return new BoxShapeT(
    this.length(),
    this.width(),
    this.height()
  );
}


unpackTo(_o: BoxShapeT): void {
  _o.length = this.length();
  _o.width = this.width();
  _o.height = this.height();
}
}

export class BoxShapeT {
constructor(
  public length: number = 0.0,
  public width: number = 0.0,
  public height: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return BoxShape.createBoxShape(builder,
    this.length,
    this.width,
    this.height
  );
}
}
