// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Float {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Float {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

val():number {
  return this.bb!.readFloat32(this.bb_pos);
}

static sizeOf():number {
  return 4;
}

static createFloat(builder:flatbuffers.Builder, val: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeFloat32(val);
  return builder.offset();
}


unpack(): FloatT {
  return new FloatT(
    this.val()
  );
}


unpackTo(_o: FloatT): void {
  _o.val = this.val();
}
}

export class FloatT {
constructor(
  public val: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Float.createFloat(builder,
    this.val
  );
}
}
