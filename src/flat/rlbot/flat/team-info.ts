// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TeamInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamInfo(bb:flatbuffers.ByteBuffer, obj?:TeamInfo):TeamInfo {
  return (obj || new TeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamInfo(bb:flatbuffers.ByteBuffer, obj?:TeamInfo):TeamInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * number of goals scored.
 */
score():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTeamInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTeamIndex(builder:flatbuffers.Builder, teamIndex:number) {
  builder.addFieldInt32(0, teamIndex, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(1, score, 0);
}

static endTeamInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamInfo(builder:flatbuffers.Builder, teamIndex:number, score:number):flatbuffers.Offset {
  TeamInfo.startTeamInfo(builder);
  TeamInfo.addTeamIndex(builder, teamIndex);
  TeamInfo.addScore(builder, score);
  return TeamInfo.endTeamInfo(builder);
}

unpack(): TeamInfoT {
  return new TeamInfoT(
    this.teamIndex(),
    this.score()
  );
}


unpackTo(_o: TeamInfoT): void {
  _o.teamIndex = this.teamIndex();
  _o.score = this.score();
}
}

export class TeamInfoT {
constructor(
  public teamIndex: number = 0,
  public score: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TeamInfo.createTeamInfo(builder,
    this.teamIndex,
    this.score
  );
}
}
