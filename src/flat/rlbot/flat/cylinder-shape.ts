// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class CylinderShape {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CylinderShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCylinderShape(bb:flatbuffers.ByteBuffer, obj?:CylinderShape):CylinderShape {
  return (obj || new CylinderShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCylinderShape(bb:flatbuffers.ByteBuffer, obj?:CylinderShape):CylinderShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CylinderShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

diameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startCylinderShape(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat32(0, diameter, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(1, height, 0.0);
}

static endCylinderShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCylinderShape(builder:flatbuffers.Builder, diameter:number, height:number):flatbuffers.Offset {
  CylinderShape.startCylinderShape(builder);
  CylinderShape.addDiameter(builder, diameter);
  CylinderShape.addHeight(builder, height);
  return CylinderShape.endCylinderShape(builder);
}

unpack(): CylinderShapeT {
  return new CylinderShapeT(
    this.diameter(),
    this.height()
  );
}


unpackTo(_o: CylinderShapeT): void {
  _o.diameter = this.diameter();
  _o.height = this.height();
}
}

export class CylinderShapeT {
constructor(
  public diameter: number = 0.0,
  public height: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CylinderShape.createCylinderShape(builder,
    this.diameter,
    this.height
  );
}
}
