// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vector3, Vector3T } from '../../rlbot/flat/vector3';


export class GoalInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GoalInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGoalInfo(bb:flatbuffers.ByteBuffer, obj?:GoalInfo):GoalInfo {
  return (obj || new GoalInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGoalInfo(bb:flatbuffers.ByteBuffer, obj?:GoalInfo):GoalInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GoalInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teamNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

location(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

direction(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startGoalInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTeamNum(builder:flatbuffers.Builder, teamNum:number) {
  builder.addFieldInt32(0, teamNum, 0);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, locationOffset, 0);
}

static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, directionOffset, 0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(3, width, 0.0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(4, height, 0.0);
}

static endGoalInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): GoalInfoT {
  return new GoalInfoT(
    this.teamNum(),
    (this.location() !== null ? this.location()!.unpack() : null),
    (this.direction() !== null ? this.direction()!.unpack() : null),
    this.width(),
    this.height()
  );
}


unpackTo(_o: GoalInfoT): void {
  _o.teamNum = this.teamNum();
  _o.location = (this.location() !== null ? this.location()!.unpack() : null);
  _o.direction = (this.direction() !== null ? this.direction()!.unpack() : null);
  _o.width = this.width();
  _o.height = this.height();
}
}

export class GoalInfoT {
constructor(
  public teamNum: number = 0,
  public location: Vector3T|null = null,
  public direction: Vector3T|null = null,
  public width: number = 0.0,
  public height: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  GoalInfo.startGoalInfo(builder);
  GoalInfo.addTeamNum(builder, this.teamNum);
  GoalInfo.addLocation(builder, (this.location !== null ? this.location!.pack(builder) : 0));
  GoalInfo.addDirection(builder, (this.direction !== null ? this.direction!.pack(builder) : 0));
  GoalInfo.addWidth(builder, this.width);
  GoalInfo.addHeight(builder, this.height);

  return GoalInfo.endGoalInfo(builder);
}
}
