// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A player that Rocket League treats as human, e.g. has a dedicated camera and can do training mode,
 * but is actually controlled by a bot.
 */
export class PartyMemberBotPlayer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PartyMemberBotPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPartyMemberBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PartyMemberBotPlayer):PartyMemberBotPlayer {
  return (obj || new PartyMemberBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPartyMemberBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PartyMemberBotPlayer):PartyMemberBotPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartyMemberBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startPartyMemberBotPlayer(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endPartyMemberBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPartyMemberBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  PartyMemberBotPlayer.startPartyMemberBotPlayer(builder);
  return PartyMemberBotPlayer.endPartyMemberBotPlayer(builder);
}

unpack(): PartyMemberBotPlayerT {
  return new PartyMemberBotPlayerT();
}


unpackTo(_o: PartyMemberBotPlayerT): void {}
}

export class PartyMemberBotPlayerT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PartyMemberBotPlayer.createPartyMemberBotPlayer(builder);
}
}
