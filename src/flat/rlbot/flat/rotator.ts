// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Expresses the rotation state of an object in Euler angles, with values in radians.
 */
export class Rotator {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Rotator {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

pitch():number {
  return this.bb!.readFloat32(this.bb_pos);
}

yaw():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
}

roll():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
}

static sizeOf():number {
  return 12;
}

static createRotator(builder:flatbuffers.Builder, pitch: number, yaw: number, roll: number):flatbuffers.Offset {
  builder.prep(4, 12);
  builder.writeFloat32(roll);
  builder.writeFloat32(yaw);
  builder.writeFloat32(pitch);
  return builder.offset();
}


unpack(): RotatorT {
  return new RotatorT(
    this.pitch(),
    this.yaw(),
    this.roll()
  );
}


unpackTo(_o: RotatorT): void {
  _o.pitch = this.pitch();
  _o.yaw = this.yaw();
  _o.roll = this.roll();
}
}

export class RotatorT {
constructor(
  public pitch: number = 0.0,
  public yaw: number = 0.0,
  public roll: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Rotator.createRotator(builder,
    this.pitch,
    this.yaw,
    this.roll
  );
}
}
