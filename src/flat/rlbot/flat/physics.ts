// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Rotator, RotatorT } from '../../rlbot/flat/rotator';
import { Vector3, Vector3T } from '../../rlbot/flat/vector3';


export class Physics {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Physics {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPhysics(bb:flatbuffers.ByteBuffer, obj?:Physics):Physics {
  return (obj || new Physics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPhysics(bb:flatbuffers.ByteBuffer, obj?:Physics):Physics {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Physics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

location(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotation(obj?:Rotator):Rotator|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Rotator()).__init(this.bb_pos + offset, this.bb!) : null;
}

velocity(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

angularVelocity(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startPhysics(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, rotationOffset, 0);
}

static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, velocityOffset, 0);
}

static addAngularVelocity(builder:flatbuffers.Builder, angularVelocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, angularVelocityOffset, 0);
}

static endPhysics(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PhysicsT {
  return new PhysicsT(
    (this.location() !== null ? this.location()!.unpack() : null),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    (this.velocity() !== null ? this.velocity()!.unpack() : null),
    (this.angularVelocity() !== null ? this.angularVelocity()!.unpack() : null)
  );
}


unpackTo(_o: PhysicsT): void {
  _o.location = (this.location() !== null ? this.location()!.unpack() : null);
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.velocity = (this.velocity() !== null ? this.velocity()!.unpack() : null);
  _o.angularVelocity = (this.angularVelocity() !== null ? this.angularVelocity()!.unpack() : null);
}
}

export class PhysicsT {
constructor(
  public location: Vector3T|null = null,
  public rotation: RotatorT|null = null,
  public velocity: Vector3T|null = null,
  public angularVelocity: Vector3T|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Physics.startPhysics(builder);
  Physics.addLocation(builder, (this.location !== null ? this.location!.pack(builder) : 0));
  Physics.addRotation(builder, (this.rotation !== null ? this.rotation!.pack(builder) : 0));
  Physics.addVelocity(builder, (this.velocity !== null ? this.velocity!.pack(builder) : 0));
  Physics.addAngularVelocity(builder, (this.angularVelocity !== null ? this.angularVelocity!.pack(builder) : 0));

  return Physics.endPhysics(builder);
}
}
