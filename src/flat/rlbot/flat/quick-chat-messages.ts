// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { QuickChat, QuickChatT } from '../../rlbot/flat/quick-chat';


export class QuickChatMessages {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):QuickChatMessages {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsQuickChatMessages(bb:flatbuffers.ByteBuffer, obj?:QuickChatMessages):QuickChatMessages {
  return (obj || new QuickChatMessages()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsQuickChatMessages(bb:flatbuffers.ByteBuffer, obj?:QuickChatMessages):QuickChatMessages {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuickChatMessages()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messages(index: number, obj?:QuickChat):QuickChat|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new QuickChat()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

messagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startQuickChatMessages(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
}

static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endQuickChatMessages(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createQuickChatMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  QuickChatMessages.startQuickChatMessages(builder);
  QuickChatMessages.addMessages(builder, messagesOffset);
  return QuickChatMessages.endQuickChatMessages(builder);
}

unpack(): QuickChatMessagesT {
  return new QuickChatMessagesT(
    this.bb!.createObjList(this.messages.bind(this), this.messagesLength())
  );
}


unpackTo(_o: QuickChatMessagesT): void {
  _o.messages = this.bb!.createObjList(this.messages.bind(this), this.messagesLength());
}
}

export class QuickChatMessagesT {
constructor(
  public messages: (QuickChatT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const messages = QuickChatMessages.createMessagesVector(builder, builder.createObjectOffsetList(this.messages));

  return QuickChatMessages.createQuickChatMessages(builder,
    messages
  );
}
}
