// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BallInfo, BallInfoT } from '../../rlbot/flat/ball-info';
import { BoostPadState, BoostPadStateT } from '../../rlbot/flat/boost-pad-state';
import { DropshotTile, DropshotTileT } from '../../rlbot/flat/dropshot-tile';
import { GameInfo, GameInfoT } from '../../rlbot/flat/game-info';
import { PlayerInfo, PlayerInfoT } from '../../rlbot/flat/player-info';
import { TeamInfo, TeamInfoT } from '../../rlbot/flat/team-info';


export class GameTickPacket {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameTickPacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameTickPacket(bb:flatbuffers.ByteBuffer, obj?:GameTickPacket):GameTickPacket {
  return (obj || new GameTickPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameTickPacket(bb:flatbuffers.ByteBuffer, obj?:GameTickPacket):GameTickPacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameTickPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

players(index: number, obj?:PlayerInfo):PlayerInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

boostPadStates(index: number, obj?:BoostPadState):BoostPadState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BoostPadState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

boostPadStatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ball(obj?:BallInfo):BallInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BallInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

gameInfo(obj?:GameInfo):GameInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new GameInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

tileInformation(index: number, obj?:DropshotTile):DropshotTile|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DropshotTile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tileInformationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

teams(index: number, obj?:TeamInfo):TeamInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TeamInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

teamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGameTickPacket(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersOffset, 0);
}

static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBoostPadStates(builder:flatbuffers.Builder, boostPadStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, boostPadStatesOffset, 0);
}

static createBoostPadStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBoostPadStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBall(builder:flatbuffers.Builder, ballOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ballOffset, 0);
}

static addGameInfo(builder:flatbuffers.Builder, gameInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, gameInfoOffset, 0);
}

static addTileInformation(builder:flatbuffers.Builder, tileInformationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tileInformationOffset, 0);
}

static createTileInformationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTileInformationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTeams(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamsOffset, 0);
}

static createTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGameTickPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): GameTickPacketT {
  return new GameTickPacketT(
    this.bb!.createObjList(this.players.bind(this), this.playersLength()),
    this.bb!.createObjList(this.boostPadStates.bind(this), this.boostPadStatesLength()),
    (this.ball() !== null ? this.ball()!.unpack() : null),
    (this.gameInfo() !== null ? this.gameInfo()!.unpack() : null),
    this.bb!.createObjList(this.tileInformation.bind(this), this.tileInformationLength()),
    this.bb!.createObjList(this.teams.bind(this), this.teamsLength())
  );
}


unpackTo(_o: GameTickPacketT): void {
  _o.players = this.bb!.createObjList(this.players.bind(this), this.playersLength());
  _o.boostPadStates = this.bb!.createObjList(this.boostPadStates.bind(this), this.boostPadStatesLength());
  _o.ball = (this.ball() !== null ? this.ball()!.unpack() : null);
  _o.gameInfo = (this.gameInfo() !== null ? this.gameInfo()!.unpack() : null);
  _o.tileInformation = this.bb!.createObjList(this.tileInformation.bind(this), this.tileInformationLength());
  _o.teams = this.bb!.createObjList(this.teams.bind(this), this.teamsLength());
}
}

export class GameTickPacketT {
constructor(
  public players: (PlayerInfoT)[] = [],
  public boostPadStates: (BoostPadStateT)[] = [],
  public ball: BallInfoT|null = null,
  public gameInfo: GameInfoT|null = null,
  public tileInformation: (DropshotTileT)[] = [],
  public teams: (TeamInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const players = GameTickPacket.createPlayersVector(builder, builder.createObjectOffsetList(this.players));
  const boostPadStates = GameTickPacket.createBoostPadStatesVector(builder, builder.createObjectOffsetList(this.boostPadStates));
  const ball = (this.ball !== null ? this.ball!.pack(builder) : 0);
  const gameInfo = (this.gameInfo !== null ? this.gameInfo!.pack(builder) : 0);
  const tileInformation = GameTickPacket.createTileInformationVector(builder, builder.createObjectOffsetList(this.tileInformation));
  const teams = GameTickPacket.createTeamsVector(builder, builder.createObjectOffsetList(this.teams));

  GameTickPacket.startGameTickPacket(builder);
  GameTickPacket.addPlayers(builder, players);
  GameTickPacket.addBoostPadStates(builder, boostPadStates);
  GameTickPacket.addBall(builder, ball);
  GameTickPacket.addGameInfo(builder, gameInfo);
  GameTickPacket.addTileInformation(builder, tileInformation);
  GameTickPacket.addTeams(builder, teams);

  return GameTickPacket.endGameTickPacket(builder);
}
}
