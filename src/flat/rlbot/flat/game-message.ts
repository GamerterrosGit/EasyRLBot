// automatically generated by the FlatBuffers compiler, do not modify

import { PlayerInputChange, PlayerInputChangeT } from '../../rlbot/flat/player-input-change';
import { PlayerSpectate, PlayerSpectateT } from '../../rlbot/flat/player-spectate';
import { PlayerStatEvent, PlayerStatEventT } from '../../rlbot/flat/player-stat-event';


export enum GameMessage {
  NONE = 0,
  PlayerStatEvent = 1,
  PlayerSpectate = 2,
  PlayerInputChange = 3
}

export function unionToGameMessage(
  type: GameMessage,
  accessor: (obj:PlayerInputChange|PlayerSpectate|PlayerStatEvent) => PlayerInputChange|PlayerSpectate|PlayerStatEvent|null
): PlayerInputChange|PlayerSpectate|PlayerStatEvent|null {
  switch(GameMessage[type]) {
    case 'NONE': return null; 
    case 'PlayerStatEvent': return accessor(new PlayerStatEvent())! as PlayerStatEvent;
    case 'PlayerSpectate': return accessor(new PlayerSpectate())! as PlayerSpectate;
    case 'PlayerInputChange': return accessor(new PlayerInputChange())! as PlayerInputChange;
    default: return null;
  }
}

export function unionListToGameMessage(
  type: GameMessage, 
  accessor: (index: number, obj:PlayerInputChange|PlayerSpectate|PlayerStatEvent) => PlayerInputChange|PlayerSpectate|PlayerStatEvent|null, 
  index: number
): PlayerInputChange|PlayerSpectate|PlayerStatEvent|null {
  switch(GameMessage[type]) {
    case 'NONE': return null; 
    case 'PlayerStatEvent': return accessor(index, new PlayerStatEvent())! as PlayerStatEvent;
    case 'PlayerSpectate': return accessor(index, new PlayerSpectate())! as PlayerSpectate;
    case 'PlayerInputChange': return accessor(index, new PlayerInputChange())! as PlayerInputChange;
    default: return null;
  }
}
