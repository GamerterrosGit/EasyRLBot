// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SphereShape {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SphereShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSphereShape(bb:flatbuffers.ByteBuffer, obj?:SphereShape):SphereShape {
  return (obj || new SphereShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSphereShape(bb:flatbuffers.ByteBuffer, obj?:SphereShape):SphereShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SphereShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

diameter():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSphereShape(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat32(0, diameter, 0.0);
}

static endSphereShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSphereShape(builder:flatbuffers.Builder, diameter:number):flatbuffers.Offset {
  SphereShape.startSphereShape(builder);
  SphereShape.addDiameter(builder, diameter);
  return SphereShape.endSphereShape(builder);
}

unpack(): SphereShapeT {
  return new SphereShapeT(
    this.diameter()
  );
}


unpackTo(_o: SphereShapeT): void {
  _o.diameter = this.diameter();
}
}

export class SphereShapeT {
constructor(
  public diameter: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SphereShape.createSphereShape(builder,
    this.diameter
  );
}
}
