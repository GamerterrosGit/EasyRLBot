// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ExistingMatchBehavior } from '../../rlbot/flat/existing-match-behavior';
import { GameMap } from '../../rlbot/flat/game-map';
import { GameMode } from '../../rlbot/flat/game-mode';
import { MutatorSettings, MutatorSettingsT } from '../../rlbot/flat/mutator-settings';
import { PlayerConfiguration, PlayerConfigurationT } from '../../rlbot/flat/player-configuration';


export class MatchSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MatchSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMatchSettings(bb:flatbuffers.ByteBuffer, obj?:MatchSettings):MatchSettings {
  return (obj || new MatchSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMatchSettings(bb:flatbuffers.ByteBuffer, obj?:MatchSettings):MatchSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatchSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playerConfigurations(index: number, obj?:PlayerConfiguration):PlayerConfiguration|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PlayerConfiguration()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playerConfigurationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

gameMode():GameMode {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameMode.Soccer;
}

gameMap():GameMap {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameMap.DFHStadium;
}

skipReplays():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

instantStart():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutatorSettings(obj?:MutatorSettings):MutatorSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new MutatorSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

existingMatchBehavior():ExistingMatchBehavior {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ExistingMatchBehavior.Restart_If_Different;
}

enableLockstep():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableRendering():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableStateSetting():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

autoSaveReplay():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startMatchSettings(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addPlayerConfigurations(builder:flatbuffers.Builder, playerConfigurationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerConfigurationsOffset, 0);
}

static createPlayerConfigurationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayerConfigurationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGameMode(builder:flatbuffers.Builder, gameMode:GameMode) {
  builder.addFieldInt8(1, gameMode, GameMode.Soccer);
}

static addGameMap(builder:flatbuffers.Builder, gameMap:GameMap) {
  builder.addFieldInt8(2, gameMap, GameMap.DFHStadium);
}

static addSkipReplays(builder:flatbuffers.Builder, skipReplays:boolean) {
  builder.addFieldInt8(3, +skipReplays, +false);
}

static addInstantStart(builder:flatbuffers.Builder, instantStart:boolean) {
  builder.addFieldInt8(4, +instantStart, +false);
}

static addMutatorSettings(builder:flatbuffers.Builder, mutatorSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, mutatorSettingsOffset, 0);
}

static addExistingMatchBehavior(builder:flatbuffers.Builder, existingMatchBehavior:ExistingMatchBehavior) {
  builder.addFieldInt8(6, existingMatchBehavior, ExistingMatchBehavior.Restart_If_Different);
}

static addEnableLockstep(builder:flatbuffers.Builder, enableLockstep:boolean) {
  builder.addFieldInt8(7, +enableLockstep, +false);
}

static addEnableRendering(builder:flatbuffers.Builder, enableRendering:boolean) {
  builder.addFieldInt8(8, +enableRendering, +false);
}

static addEnableStateSetting(builder:flatbuffers.Builder, enableStateSetting:boolean) {
  builder.addFieldInt8(9, +enableStateSetting, +false);
}

static addAutoSaveReplay(builder:flatbuffers.Builder, autoSaveReplay:boolean) {
  builder.addFieldInt8(10, +autoSaveReplay, +false);
}

static endMatchSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): MatchSettingsT {
  return new MatchSettingsT(
    this.bb!.createObjList(this.playerConfigurations.bind(this), this.playerConfigurationsLength()),
    this.gameMode(),
    this.gameMap(),
    this.skipReplays(),
    this.instantStart(),
    (this.mutatorSettings() !== null ? this.mutatorSettings()!.unpack() : null),
    this.existingMatchBehavior(),
    this.enableLockstep(),
    this.enableRendering(),
    this.enableStateSetting(),
    this.autoSaveReplay()
  );
}


unpackTo(_o: MatchSettingsT): void {
  _o.playerConfigurations = this.bb!.createObjList(this.playerConfigurations.bind(this), this.playerConfigurationsLength());
  _o.gameMode = this.gameMode();
  _o.gameMap = this.gameMap();
  _o.skipReplays = this.skipReplays();
  _o.instantStart = this.instantStart();
  _o.mutatorSettings = (this.mutatorSettings() !== null ? this.mutatorSettings()!.unpack() : null);
  _o.existingMatchBehavior = this.existingMatchBehavior();
  _o.enableLockstep = this.enableLockstep();
  _o.enableRendering = this.enableRendering();
  _o.enableStateSetting = this.enableStateSetting();
  _o.autoSaveReplay = this.autoSaveReplay();
}
}

export class MatchSettingsT {
constructor(
  public playerConfigurations: (PlayerConfigurationT)[] = [],
  public gameMode: GameMode = GameMode.Soccer,
  public gameMap: GameMap = GameMap.DFHStadium,
  public skipReplays: boolean = false,
  public instantStart: boolean = false,
  public mutatorSettings: MutatorSettingsT|null = null,
  public existingMatchBehavior: ExistingMatchBehavior = ExistingMatchBehavior.Restart_If_Different,
  public enableLockstep: boolean = false,
  public enableRendering: boolean = false,
  public enableStateSetting: boolean = false,
  public autoSaveReplay: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const playerConfigurations = MatchSettings.createPlayerConfigurationsVector(builder, builder.createObjectOffsetList(this.playerConfigurations));
  const mutatorSettings = (this.mutatorSettings !== null ? this.mutatorSettings!.pack(builder) : 0);

  MatchSettings.startMatchSettings(builder);
  MatchSettings.addPlayerConfigurations(builder, playerConfigurations);
  MatchSettings.addGameMode(builder, this.gameMode);
  MatchSettings.addGameMap(builder, this.gameMap);
  MatchSettings.addSkipReplays(builder, this.skipReplays);
  MatchSettings.addInstantStart(builder, this.instantStart);
  MatchSettings.addMutatorSettings(builder, mutatorSettings);
  MatchSettings.addExistingMatchBehavior(builder, this.existingMatchBehavior);
  MatchSettings.addEnableLockstep(builder, this.enableLockstep);
  MatchSettings.addEnableRendering(builder, this.enableRendering);
  MatchSettings.addEnableStateSetting(builder, this.enableStateSetting);
  MatchSettings.addAutoSaveReplay(builder, this.autoSaveReplay);

  return MatchSettings.endMatchSettings(builder);
}
}
