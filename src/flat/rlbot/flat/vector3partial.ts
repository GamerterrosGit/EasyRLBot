// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Float, FloatT } from '../../rlbot/flat/float';


export class Vector3Partial {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Vector3Partial {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVector3Partial(bb:flatbuffers.ByteBuffer, obj?:Vector3Partial):Vector3Partial {
  return (obj || new Vector3Partial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVector3Partial(bb:flatbuffers.ByteBuffer, obj?:Vector3Partial):Vector3Partial {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Vector3Partial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x(obj?:Float):Float|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Float()).__init(this.bb_pos + offset, this.bb!) : null;
}

y(obj?:Float):Float|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Float()).__init(this.bb_pos + offset, this.bb!) : null;
}

z(obj?:Float):Float|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Float()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startVector3Partial(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addX(builder:flatbuffers.Builder, xOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, xOffset, 0);
}

static addY(builder:flatbuffers.Builder, yOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, yOffset, 0);
}

static addZ(builder:flatbuffers.Builder, zOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, zOffset, 0);
}

static endVector3Partial(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): Vector3PartialT {
  return new Vector3PartialT(
    (this.x() !== null ? this.x()!.unpack() : null),
    (this.y() !== null ? this.y()!.unpack() : null),
    (this.z() !== null ? this.z()!.unpack() : null)
  );
}


unpackTo(_o: Vector3PartialT): void {
  _o.x = (this.x() !== null ? this.x()!.unpack() : null);
  _o.y = (this.y() !== null ? this.y()!.unpack() : null);
  _o.z = (this.z() !== null ? this.z()!.unpack() : null);
}
}

export class Vector3PartialT {
constructor(
  public x: FloatT|null = null,
  public y: FloatT|null = null,
  public z: FloatT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Vector3Partial.startVector3Partial(builder);
  Vector3Partial.addX(builder, (this.x !== null ? this.x!.pack(builder) : 0));
  Vector3Partial.addY(builder, (this.y !== null ? this.y!.pack(builder) : 0));
  Vector3Partial.addZ(builder, (this.z !== null ? this.z!.pack(builder) : 0));

  return Vector3Partial.endVector3Partial(builder);
}
}
