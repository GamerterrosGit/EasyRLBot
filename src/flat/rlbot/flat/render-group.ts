// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RenderMessage, RenderMessageT } from '../../rlbot/flat/render-message';


export class RenderGroup {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RenderGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRenderGroup(bb:flatbuffers.ByteBuffer, obj?:RenderGroup):RenderGroup {
  return (obj || new RenderGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRenderGroup(bb:flatbuffers.ByteBuffer, obj?:RenderGroup):RenderGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RenderGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

renderMessages(index: number, obj?:RenderMessage):RenderMessage|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RenderMessage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

renderMessagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * The id of the render group
 */
id():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRenderGroup(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRenderMessages(builder:flatbuffers.Builder, renderMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, renderMessagesOffset, 0);
}

static createRenderMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRenderMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(1, id, 0);
}

static endRenderGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRenderGroup(builder:flatbuffers.Builder, renderMessagesOffset:flatbuffers.Offset, id:number):flatbuffers.Offset {
  RenderGroup.startRenderGroup(builder);
  RenderGroup.addRenderMessages(builder, renderMessagesOffset);
  RenderGroup.addId(builder, id);
  return RenderGroup.endRenderGroup(builder);
}

unpack(): RenderGroupT {
  return new RenderGroupT(
    this.bb!.createObjList(this.renderMessages.bind(this), this.renderMessagesLength()),
    this.id()
  );
}


unpackTo(_o: RenderGroupT): void {
  _o.renderMessages = this.bb!.createObjList(this.renderMessages.bind(this), this.renderMessagesLength());
  _o.id = this.id();
}
}

export class RenderGroupT {
constructor(
  public renderMessages: (RenderMessageT)[] = [],
  public id: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const renderMessages = RenderGroup.createRenderMessagesVector(builder, builder.createObjectOffsetList(this.renderMessages));

  return RenderGroup.createRenderGroup(builder,
    renderMessages,
    this.id
  );
}
}
