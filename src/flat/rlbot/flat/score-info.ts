// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ScoreInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScoreInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScoreInfo(bb:flatbuffers.ByteBuffer, obj?:ScoreInfo):ScoreInfo {
  return (obj || new ScoreInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScoreInfo(bb:flatbuffers.ByteBuffer, obj?:ScoreInfo):ScoreInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScoreInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

goals():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

ownGoals():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

assists():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

saves():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

shots():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

demolitions():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startScoreInfo(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(0, score, 0);
}

static addGoals(builder:flatbuffers.Builder, goals:number) {
  builder.addFieldInt32(1, goals, 0);
}

static addOwnGoals(builder:flatbuffers.Builder, ownGoals:number) {
  builder.addFieldInt32(2, ownGoals, 0);
}

static addAssists(builder:flatbuffers.Builder, assists:number) {
  builder.addFieldInt32(3, assists, 0);
}

static addSaves(builder:flatbuffers.Builder, saves:number) {
  builder.addFieldInt32(4, saves, 0);
}

static addShots(builder:flatbuffers.Builder, shots:number) {
  builder.addFieldInt32(5, shots, 0);
}

static addDemolitions(builder:flatbuffers.Builder, demolitions:number) {
  builder.addFieldInt32(6, demolitions, 0);
}

static endScoreInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScoreInfo(builder:flatbuffers.Builder, score:number, goals:number, ownGoals:number, assists:number, saves:number, shots:number, demolitions:number):flatbuffers.Offset {
  ScoreInfo.startScoreInfo(builder);
  ScoreInfo.addScore(builder, score);
  ScoreInfo.addGoals(builder, goals);
  ScoreInfo.addOwnGoals(builder, ownGoals);
  ScoreInfo.addAssists(builder, assists);
  ScoreInfo.addSaves(builder, saves);
  ScoreInfo.addShots(builder, shots);
  ScoreInfo.addDemolitions(builder, demolitions);
  return ScoreInfo.endScoreInfo(builder);
}

unpack(): ScoreInfoT {
  return new ScoreInfoT(
    this.score(),
    this.goals(),
    this.ownGoals(),
    this.assists(),
    this.saves(),
    this.shots(),
    this.demolitions()
  );
}


unpackTo(_o: ScoreInfoT): void {
  _o.score = this.score();
  _o.goals = this.goals();
  _o.ownGoals = this.ownGoals();
  _o.assists = this.assists();
  _o.saves = this.saves();
  _o.shots = this.shots();
  _o.demolitions = this.demolitions();
}
}

export class ScoreInfoT {
constructor(
  public score: number = 0,
  public goals: number = 0,
  public ownGoals: number = 0,
  public assists: number = 0,
  public saves: number = 0,
  public shots: number = 0,
  public demolitions: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ScoreInfo.createScoreInfo(builder,
    this.score,
    this.goals,
    this.ownGoals,
    this.assists,
    this.saves,
    this.shots,
    this.demolitions
  );
}
}
