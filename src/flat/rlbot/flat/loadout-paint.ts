// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Specification for 'painted' items. See https://github.com/RLBot/RLBot/wiki/Bot-Customization
 */
export class LoadoutPaint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LoadoutPaint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLoadoutPaint(bb:flatbuffers.ByteBuffer, obj?:LoadoutPaint):LoadoutPaint {
  return (obj || new LoadoutPaint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLoadoutPaint(bb:flatbuffers.ByteBuffer, obj?:LoadoutPaint):LoadoutPaint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoadoutPaint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

carPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

decalPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

wheelsPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boostPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

antennaPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

hatPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

trailsPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

goalExplosionPaintId():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startLoadoutPaint(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addCarPaintId(builder:flatbuffers.Builder, carPaintId:number) {
  builder.addFieldInt32(0, carPaintId, 0);
}

static addDecalPaintId(builder:flatbuffers.Builder, decalPaintId:number) {
  builder.addFieldInt32(1, decalPaintId, 0);
}

static addWheelsPaintId(builder:flatbuffers.Builder, wheelsPaintId:number) {
  builder.addFieldInt32(2, wheelsPaintId, 0);
}

static addBoostPaintId(builder:flatbuffers.Builder, boostPaintId:number) {
  builder.addFieldInt32(3, boostPaintId, 0);
}

static addAntennaPaintId(builder:flatbuffers.Builder, antennaPaintId:number) {
  builder.addFieldInt32(4, antennaPaintId, 0);
}

static addHatPaintId(builder:flatbuffers.Builder, hatPaintId:number) {
  builder.addFieldInt32(5, hatPaintId, 0);
}

static addTrailsPaintId(builder:flatbuffers.Builder, trailsPaintId:number) {
  builder.addFieldInt32(6, trailsPaintId, 0);
}

static addGoalExplosionPaintId(builder:flatbuffers.Builder, goalExplosionPaintId:number) {
  builder.addFieldInt32(7, goalExplosionPaintId, 0);
}

static endLoadoutPaint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLoadoutPaint(builder:flatbuffers.Builder, carPaintId:number, decalPaintId:number, wheelsPaintId:number, boostPaintId:number, antennaPaintId:number, hatPaintId:number, trailsPaintId:number, goalExplosionPaintId:number):flatbuffers.Offset {
  LoadoutPaint.startLoadoutPaint(builder);
  LoadoutPaint.addCarPaintId(builder, carPaintId);
  LoadoutPaint.addDecalPaintId(builder, decalPaintId);
  LoadoutPaint.addWheelsPaintId(builder, wheelsPaintId);
  LoadoutPaint.addBoostPaintId(builder, boostPaintId);
  LoadoutPaint.addAntennaPaintId(builder, antennaPaintId);
  LoadoutPaint.addHatPaintId(builder, hatPaintId);
  LoadoutPaint.addTrailsPaintId(builder, trailsPaintId);
  LoadoutPaint.addGoalExplosionPaintId(builder, goalExplosionPaintId);
  return LoadoutPaint.endLoadoutPaint(builder);
}

unpack(): LoadoutPaintT {
  return new LoadoutPaintT(
    this.carPaintId(),
    this.decalPaintId(),
    this.wheelsPaintId(),
    this.boostPaintId(),
    this.antennaPaintId(),
    this.hatPaintId(),
    this.trailsPaintId(),
    this.goalExplosionPaintId()
  );
}


unpackTo(_o: LoadoutPaintT): void {
  _o.carPaintId = this.carPaintId();
  _o.decalPaintId = this.decalPaintId();
  _o.wheelsPaintId = this.wheelsPaintId();
  _o.boostPaintId = this.boostPaintId();
  _o.antennaPaintId = this.antennaPaintId();
  _o.hatPaintId = this.hatPaintId();
  _o.trailsPaintId = this.trailsPaintId();
  _o.goalExplosionPaintId = this.goalExplosionPaintId();
}
}

export class LoadoutPaintT {
constructor(
  public carPaintId: number = 0,
  public decalPaintId: number = 0,
  public wheelsPaintId: number = 0,
  public boostPaintId: number = 0,
  public antennaPaintId: number = 0,
  public hatPaintId: number = 0,
  public trailsPaintId: number = 0,
  public goalExplosionPaintId: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return LoadoutPaint.createLoadoutPaint(builder,
    this.carPaintId,
    this.decalPaintId,
    this.wheelsPaintId,
    this.boostPaintId,
    this.antennaPaintId,
    this.hatPaintId,
    this.trailsPaintId,
    this.goalExplosionPaintId
  );
}
}
