// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Physics, PhysicsT } from '../../rlbot/flat/physics';


export class PredictionSlice {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PredictionSlice {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPredictionSlice(bb:flatbuffers.ByteBuffer, obj?:PredictionSlice):PredictionSlice {
  return (obj || new PredictionSlice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPredictionSlice(bb:flatbuffers.ByteBuffer, obj?:PredictionSlice):PredictionSlice {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PredictionSlice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The moment in game time that this prediction corresponds to.
 * This corresponds to 'secondsElapsed' in the GameInfo table.
 */
gameSeconds():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * The predicted location and motion of the object.
 */
physics(obj?:Physics):Physics|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Physics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPredictionSlice(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGameSeconds(builder:flatbuffers.Builder, gameSeconds:number) {
  builder.addFieldFloat32(0, gameSeconds, 0.0);
}

static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, physicsOffset, 0);
}

static endPredictionSlice(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PredictionSliceT {
  return new PredictionSliceT(
    this.gameSeconds(),
    (this.physics() !== null ? this.physics()!.unpack() : null)
  );
}


unpackTo(_o: PredictionSliceT): void {
  _o.gameSeconds = this.gameSeconds();
  _o.physics = (this.physics() !== null ? this.physics()!.unpack() : null);
}
}

export class PredictionSliceT {
constructor(
  public gameSeconds: number = 0.0,
  public physics: PhysicsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const physics = (this.physics !== null ? this.physics!.pack(builder) : 0);

  PredictionSlice.startPredictionSlice(builder);
  PredictionSlice.addGameSeconds(builder, this.gameSeconds);
  PredictionSlice.addPhysics(builder, physics);

  return PredictionSlice.endPredictionSlice(builder);
}
}
