// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RotatorPartial, RotatorPartialT } from '../../rlbot/flat/rotator-partial';
import { Vector3Partial, Vector3PartialT } from '../../rlbot/flat/vector3partial';


export class DesiredPhysics {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DesiredPhysics {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDesiredPhysics(bb:flatbuffers.ByteBuffer, obj?:DesiredPhysics):DesiredPhysics {
  return (obj || new DesiredPhysics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDesiredPhysics(bb:flatbuffers.ByteBuffer, obj?:DesiredPhysics):DesiredPhysics {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredPhysics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

location(obj?:Vector3Partial):Vector3Partial|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

rotation(obj?:RotatorPartial):RotatorPartial|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new RotatorPartial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

velocity(obj?:Vector3Partial):Vector3Partial|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

angularVelocity(obj?:Vector3Partial):Vector3Partial|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDesiredPhysics(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, locationOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rotationOffset, 0);
}

static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, velocityOffset, 0);
}

static addAngularVelocity(builder:flatbuffers.Builder, angularVelocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, angularVelocityOffset, 0);
}

static endDesiredPhysics(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DesiredPhysicsT {
  return new DesiredPhysicsT(
    (this.location() !== null ? this.location()!.unpack() : null),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    (this.velocity() !== null ? this.velocity()!.unpack() : null),
    (this.angularVelocity() !== null ? this.angularVelocity()!.unpack() : null)
  );
}


unpackTo(_o: DesiredPhysicsT): void {
  _o.location = (this.location() !== null ? this.location()!.unpack() : null);
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.velocity = (this.velocity() !== null ? this.velocity()!.unpack() : null);
  _o.angularVelocity = (this.angularVelocity() !== null ? this.angularVelocity()!.unpack() : null);
}
}

export class DesiredPhysicsT {
constructor(
  public location: Vector3PartialT|null = null,
  public rotation: RotatorPartialT|null = null,
  public velocity: Vector3PartialT|null = null,
  public angularVelocity: Vector3PartialT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const location = (this.location !== null ? this.location!.pack(builder) : 0);
  const rotation = (this.rotation !== null ? this.rotation!.pack(builder) : 0);
  const velocity = (this.velocity !== null ? this.velocity!.pack(builder) : 0);
  const angularVelocity = (this.angularVelocity !== null ? this.angularVelocity!.pack(builder) : 0);

  DesiredPhysics.startDesiredPhysics(builder);
  DesiredPhysics.addLocation(builder, location);
  DesiredPhysics.addRotation(builder, rotation);
  DesiredPhysics.addVelocity(builder, velocity);
  DesiredPhysics.addAngularVelocity(builder, angularVelocity);

  return DesiredPhysics.endDesiredPhysics(builder);
}
}
