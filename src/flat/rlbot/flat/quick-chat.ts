// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { QuickChatSelection } from '../../rlbot/flat/quick-chat-selection';


export class QuickChat {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):QuickChat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsQuickChat(bb:flatbuffers.ByteBuffer, obj?:QuickChat):QuickChat {
  return (obj || new QuickChat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsQuickChat(bb:flatbuffers.ByteBuffer, obj?:QuickChat):QuickChat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuickChat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

quickChatSelection():QuickChatSelection {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : QuickChatSelection.Information_IGotIt;
}

/**
 * The index of the player that sent the quick chat
 */
playerIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * True if the chat is team only false if everyone can see it.
 */
teamOnly():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

messageIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

timeStamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startQuickChat(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addQuickChatSelection(builder:flatbuffers.Builder, quickChatSelection:QuickChatSelection) {
  builder.addFieldInt8(0, quickChatSelection, QuickChatSelection.Information_IGotIt);
}

static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(1, playerIndex, 0);
}

static addTeamOnly(builder:flatbuffers.Builder, teamOnly:boolean) {
  builder.addFieldInt8(2, +teamOnly, +false);
}

static addMessageIndex(builder:flatbuffers.Builder, messageIndex:number) {
  builder.addFieldInt32(3, messageIndex, 0);
}

static addTimeStamp(builder:flatbuffers.Builder, timeStamp:number) {
  builder.addFieldFloat32(4, timeStamp, 0.0);
}

static endQuickChat(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishQuickChatBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedQuickChatBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createQuickChat(builder:flatbuffers.Builder, quickChatSelection:QuickChatSelection, playerIndex:number, teamOnly:boolean, messageIndex:number, timeStamp:number):flatbuffers.Offset {
  QuickChat.startQuickChat(builder);
  QuickChat.addQuickChatSelection(builder, quickChatSelection);
  QuickChat.addPlayerIndex(builder, playerIndex);
  QuickChat.addTeamOnly(builder, teamOnly);
  QuickChat.addMessageIndex(builder, messageIndex);
  QuickChat.addTimeStamp(builder, timeStamp);
  return QuickChat.endQuickChat(builder);
}

unpack(): QuickChatT {
  return new QuickChatT(
    this.quickChatSelection(),
    this.playerIndex(),
    this.teamOnly(),
    this.messageIndex(),
    this.timeStamp()
  );
}


unpackTo(_o: QuickChatT): void {
  _o.quickChatSelection = this.quickChatSelection();
  _o.playerIndex = this.playerIndex();
  _o.teamOnly = this.teamOnly();
  _o.messageIndex = this.messageIndex();
  _o.timeStamp = this.timeStamp();
}
}

export class QuickChatT {
constructor(
  public quickChatSelection: QuickChatSelection = QuickChatSelection.Information_IGotIt,
  public playerIndex: number = 0,
  public teamOnly: boolean = false,
  public messageIndex: number = 0,
  public timeStamp: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return QuickChat.createQuickChat(builder,
    this.quickChatSelection,
    this.playerIndex,
    this.teamOnly,
    this.messageIndex,
    this.timeStamp
  );
}
}
