// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ControllerState, ControllerStateT } from '../../rlbot/flat/controller-state';
import { RigidBodyState, RigidBodyStateT } from '../../rlbot/flat/rigid-body-state';


/**
 * Rigid body state for a player / car in the game. Includes the latest
 * controller input, which is otherwise difficult to correlate with consequences.
 */
export class PlayerRigidBodyState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerRigidBodyState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:PlayerRigidBodyState):PlayerRigidBodyState {
  return (obj || new PlayerRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:PlayerRigidBodyState):PlayerRigidBodyState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state(obj?:RigidBodyState):RigidBodyState|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RigidBodyState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

input(obj?:ControllerState):ControllerState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ControllerState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPlayerRigidBodyState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
}

static addInput(builder:flatbuffers.Builder, inputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, inputOffset, 0);
}

static endPlayerRigidBodyState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): PlayerRigidBodyStateT {
  return new PlayerRigidBodyStateT(
    (this.state() !== null ? this.state()!.unpack() : null),
    (this.input() !== null ? this.input()!.unpack() : null)
  );
}


unpackTo(_o: PlayerRigidBodyStateT): void {
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
  _o.input = (this.input() !== null ? this.input()!.unpack() : null);
}
}

export class PlayerRigidBodyStateT {
constructor(
  public state: RigidBodyStateT|null = null,
  public input: ControllerStateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const state = (this.state !== null ? this.state!.pack(builder) : 0);
  const input = (this.input !== null ? this.input!.pack(builder) : 0);

  PlayerRigidBodyState.startPlayerRigidBodyState(builder);
  PlayerRigidBodyState.addState(builder, state);
  PlayerRigidBodyState.addInput(builder, input);

  return PlayerRigidBodyState.endPlayerRigidBodyState(builder);
}
}
