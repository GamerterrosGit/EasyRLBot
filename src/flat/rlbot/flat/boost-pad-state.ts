// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class BoostPadState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BoostPadState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoostPadState(bb:flatbuffers.ByteBuffer, obj?:BoostPadState):BoostPadState {
  return (obj || new BoostPadState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoostPadState(bb:flatbuffers.ByteBuffer, obj?:BoostPadState):BoostPadState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoostPadState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * True if the boost can be picked up
 */
isActive():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
 */
timer():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startBoostPadState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIsActive(builder:flatbuffers.Builder, isActive:boolean) {
  builder.addFieldInt8(0, +isActive, +false);
}

static addTimer(builder:flatbuffers.Builder, timer:number) {
  builder.addFieldFloat32(1, timer, 0.0);
}

static endBoostPadState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBoostPadState(builder:flatbuffers.Builder, isActive:boolean, timer:number):flatbuffers.Offset {
  BoostPadState.startBoostPadState(builder);
  BoostPadState.addIsActive(builder, isActive);
  BoostPadState.addTimer(builder, timer);
  return BoostPadState.endBoostPadState(builder);
}

unpack(): BoostPadStateT {
  return new BoostPadStateT(
    this.isActive(),
    this.timer()
  );
}


unpackTo(_o: BoostPadStateT): void {
  _o.isActive = this.isActive();
  _o.timer = this.timer();
}
}

export class BoostPadStateT {
constructor(
  public isActive: boolean = false,
  public timer: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return BoostPadState.createBoostPadState(builder,
    this.isActive,
    this.timer
  );
}
}
