// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Notification when the local player is spectating another player.
 */
export class PlayerSpectate {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerSpectate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerSpectate(bb:flatbuffers.ByteBuffer, obj?:PlayerSpectate):PlayerSpectate {
  return (obj || new PlayerSpectate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerSpectate(bb:flatbuffers.ByteBuffer, obj?:PlayerSpectate):PlayerSpectate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerSpectate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * index of the player that is being spectated. Will be -1 if not spectating anyone.
 */
playerIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startPlayerSpectate(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(0, playerIndex, 0);
}

static endPlayerSpectate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerSpectate(builder:flatbuffers.Builder, playerIndex:number):flatbuffers.Offset {
  PlayerSpectate.startPlayerSpectate(builder);
  PlayerSpectate.addPlayerIndex(builder, playerIndex);
  return PlayerSpectate.endPlayerSpectate(builder);
}

unpack(): PlayerSpectateT {
  return new PlayerSpectateT(
    this.playerIndex()
  );
}


unpackTo(_o: PlayerSpectateT): void {
  _o.playerIndex = this.playerIndex();
}
}

export class PlayerSpectateT {
constructor(
  public playerIndex: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PlayerSpectate.createPlayerSpectate(builder,
    this.playerIndex
  );
}
}
