// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A normal human player
 */
export class HumanPlayer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HumanPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHumanPlayer(bb:flatbuffers.ByteBuffer, obj?:HumanPlayer):HumanPlayer {
  return (obj || new HumanPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHumanPlayer(bb:flatbuffers.ByteBuffer, obj?:HumanPlayer):HumanPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HumanPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startHumanPlayer(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endHumanPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHumanPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  HumanPlayer.startHumanPlayer(builder);
  return HumanPlayer.endHumanPlayer(builder);
}

unpack(): HumanPlayerT {
  return new HumanPlayerT();
}


unpackTo(_o: HumanPlayerT): void {}
}

export class HumanPlayerT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HumanPlayer.createHumanPlayer(builder);
}
}
