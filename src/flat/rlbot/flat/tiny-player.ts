// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Rotator, RotatorT } from '../../rlbot/flat/rotator';
import { Vector3, Vector3T } from '../../rlbot/flat/vector3';


/**
 * A minimal version of player data, useful when bandwidth needs to be conserved.
 */
export class TinyPlayer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TinyPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTinyPlayer(bb:flatbuffers.ByteBuffer, obj?:TinyPlayer):TinyPlayer {
  return (obj || new TinyPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTinyPlayer(bb:flatbuffers.ByteBuffer, obj?:TinyPlayer):TinyPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TinyPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

location(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotation(obj?:Rotator):Rotator|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Rotator()).__init(this.bb_pos + offset, this.bb!) : null;
}

velocity(obj?:Vector3):Vector3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
}

hasWheelContact():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isSupersonic():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

team():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

boost():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTinyPlayer(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, rotationOffset, 0);
}

static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, velocityOffset, 0);
}

static addHasWheelContact(builder:flatbuffers.Builder, hasWheelContact:boolean) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
}

static addIsSupersonic(builder:flatbuffers.Builder, isSupersonic:boolean) {
  builder.addFieldInt8(4, +isSupersonic, +false);
}

static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(5, team, 0);
}

static addBoost(builder:flatbuffers.Builder, boost:number) {
  builder.addFieldInt32(6, boost, 0);
}

static endTinyPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TinyPlayerT {
  return new TinyPlayerT(
    (this.location() !== null ? this.location()!.unpack() : null),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    (this.velocity() !== null ? this.velocity()!.unpack() : null),
    this.hasWheelContact(),
    this.isSupersonic(),
    this.team(),
    this.boost()
  );
}


unpackTo(_o: TinyPlayerT): void {
  _o.location = (this.location() !== null ? this.location()!.unpack() : null);
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.velocity = (this.velocity() !== null ? this.velocity()!.unpack() : null);
  _o.hasWheelContact = this.hasWheelContact();
  _o.isSupersonic = this.isSupersonic();
  _o.team = this.team();
  _o.boost = this.boost();
}
}

export class TinyPlayerT {
constructor(
  public location: Vector3T|null = null,
  public rotation: RotatorT|null = null,
  public velocity: Vector3T|null = null,
  public hasWheelContact: boolean = false,
  public isSupersonic: boolean = false,
  public team: number = 0,
  public boost: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  TinyPlayer.startTinyPlayer(builder);
  TinyPlayer.addLocation(builder, (this.location !== null ? this.location!.pack(builder) : 0));
  TinyPlayer.addRotation(builder, (this.rotation !== null ? this.rotation!.pack(builder) : 0));
  TinyPlayer.addVelocity(builder, (this.velocity !== null ? this.velocity!.pack(builder) : 0));
  TinyPlayer.addHasWheelContact(builder, this.hasWheelContact);
  TinyPlayer.addIsSupersonic(builder, this.isSupersonic);
  TinyPlayer.addTeam(builder, this.team);
  TinyPlayer.addBoost(builder, this.boost);

  return TinyPlayer.endTinyPlayer(builder);
}
}
