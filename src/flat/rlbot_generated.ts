// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "flatbuffers"
/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum CollisionShape{
  NONE= 0,
  BoxShape= 1,
  SphereShape= 2,
  CylinderShape= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum TileState{
  Unknown= 0,

  /**
   * The default state of the tiles.
   */
  Filled= 1,

  /**
   * The state when a tile has been damaged.
   */
  Damaged= 2,

  /**
   * The state of a tile when it is open and a goal can be scored.
   */
  Open= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum RenderType{
  DrawLine2D= 1,
  DrawLine3D= 2,
  DrawLine2D_3D= 3,
  DrawRect2D= 4,
  DrawRect3D= 5,
  DrawString2D= 6,
  DrawString3D= 7,
  DrawCenteredRect3D= 8
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum QuickChatSelection{
  Information_IGotIt= 0,
  Information_NeedBoost= 1,
  Information_TakeTheShot= 2,
  Information_Defending= 3,
  Information_GoForIt= 4,
  Information_Centering= 5,
  Information_AllYours= 6,
  Information_InPosition= 7,
  Information_Incoming= 8,
  Compliments_NiceShot= 9,
  Compliments_GreatPass= 10,
  Compliments_Thanks= 11,
  Compliments_WhatASave= 12,
  Compliments_NiceOne= 13,
  Compliments_WhatAPlay= 14,
  Compliments_GreatClear= 15,
  Compliments_NiceBlock= 16,
  Reactions_OMG= 17,
  Reactions_Noooo= 18,
  Reactions_Wow= 19,
  Reactions_CloseOne= 20,
  Reactions_NoWay= 21,
  Reactions_HolyCow= 22,
  Reactions_Whew= 23,
  Reactions_Siiiick= 24,
  Reactions_Calculated= 25,
  Reactions_Savage= 26,
  Reactions_Okay= 27,
  Apologies_Cursing= 28,
  Apologies_NoProblem= 29,
  Apologies_Whoops= 30,
  Apologies_Sorry= 31,
  Apologies_MyBad= 32,
  Apologies_Oops= 33,
  Apologies_MyFault= 34,
  PostGame_Gg= 35,
  PostGame_WellPlayed= 36,
  PostGame_ThatWasFun= 37,
  PostGame_Rematch= 38,
  PostGame_OneMoreGame= 39,
  PostGame_WhatAGame= 40,
  PostGame_NiceMoves= 41,
  PostGame_EverybodyDance= 42,

  /**
   * Custom text chats made by bot makers
   */
  MaxPysonixQuickChatPresets= 43,

  /**
   * Waste of CPU cycles
   */
  Custom_Toxic_WasteCPU= 44,

  /**
   * Git gud*
   */
  Custom_Toxic_GitGut= 45,

  /**
   * De-Allocate Yourself
   */
  Custom_Toxic_DeAlloc= 46,

  /**
   * 404: Your skill not found
   */
  Custom_Toxic_404NoSkill= 47,

  /**
   * Get a virus
   */
  Custom_Toxic_CatchVirus= 48,

  /**
   * Passing!
   */
  Custom_Useful_Passing= 49,

  /**
   * Faking!
   */
  Custom_Useful_Faking= 50,

  /**
   * Demoing!
   */
  Custom_Useful_Demoing= 51,

  /**
   * BOOPING
   */
  Custom_Useful_Bumping= 52,

  /**
   * The chances of that was 47525 to 1*
   */
  Custom_Compliments_TinyChances= 53,

  /**
   * Who upped your skill level?
   */
  Custom_Compliments_SkillLevel= 54,

  /**
   * Your programmer should be proud
   */
  Custom_Compliments_proud= 55,

  /**
   * You're the GC of Bots
   */
  Custom_Compliments_GC= 56,

  /**
   * Are you <Insert Pro>Bot? *
   */
  Custom_Compliments_Pro= 57,

  /**
   * Lag
   */
  Custom_Excuses_Lag= 58,

  /**
   * Ghost inputs
   */
  Custom_Excuses_GhostInputs= 59,

  /**
   * RIGGED
   */
  Custom_Excuses_Rigged= 60,

  /**
   * Mafia plays!
   */
  Custom_Toxic_MafiaPlays= 61,

  /**
   * Yeet!
   */
  Custom_Exclamation_Yeet= 62
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum PlayerClass{
  NONE= 0,
  RLBotPlayer= 1,
  HumanPlayer= 2,
  PsyonixBotPlayer= 3,
  PartyMemberBotPlayer= 4
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum GameMode{
  Soccer= 0,
  Hoops= 1,
  Dropshot= 2,
  Hockey= 3,
  Rumble= 4,
  Heatseeker= 5
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum GameMap{
  DFHStadium= 0,
  Mannfield= 1,
  ChampionsField= 2,
  UrbanCentral= 3,
  BeckwithPark= 4,
  UtopiaColiseum= 5,
  Wasteland= 6,
  NeoTokyo= 7,
  AquaDome= 8,
  StarbaseArc= 9,
  Farmstead= 10,
  SaltyShores= 11,
  DFHStadium_Stormy= 12,
  DFHStadium_Day= 13,
  Mannfield_Stormy= 14,
  Mannfield_Night= 15,
  ChampionsField_Day= 16,
  BeckwithPark_Stormy= 17,
  BeckwithPark_Midnight= 18,
  UrbanCentral_Night= 19,
  UrbanCentral_Dawn= 20,
  UtopiaColiseum_Dusk= 21,
  DFHStadium_Snowy= 22,
  Mannfield_Snowy= 23,
  UtopiaColiseum_Snowy= 24,
  Badlands= 25,
  Badlands_Night= 26,
  TokyoUnderpass= 27,
  Arctagon= 28,
  Pillars= 29,
  Cosmic= 30,
  DoubleGoal= 31,
  Octagon= 32,
  Underpass= 33,
  UtopiaRetro= 34,
  Hoops_DunkHouse= 35,
  DropShot_Core707= 36,
  ThrowbackStadium= 37,
  ForbiddenTemple= 38,
  RivalsArena= 39,
  Farmstead_Night= 40,
  SaltyShores_Night= 41
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum MatchLength{
  Five_Minutes= 0,
  Ten_Minutes= 1,
  Twenty_Minutes= 2,
  Unlimited= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum MaxScore{
  Unlimited= 0,
  One_Goal= 1,
  Three_Goals= 2,
  Five_Goals= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum OvertimeOption{
  Unlimited= 0,
  Five_Max_First_Score= 1,
  Five_Max_Random_Team= 2
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum SeriesLengthOption{
  Unlimited= 0,
  Three_Games= 1,
  Five_Games= 2,
  Seven_Games= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum GameSpeedOption{
  Default= 0,
  Slo_Mo= 1,
  Time_Warp= 2
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BallMaxSpeedOption{
  Default= 0,
  Slow= 1,
  Fast= 2,
  Super_Fast= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BallTypeOption{
  Default= 0,
  Cube= 1,
  Puck= 2,
  Basketball= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BallWeightOption{
  Default= 0,
  Light= 1,
  Heavy= 2,
  Super_Light= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BallSizeOption{
  Default= 0,
  Small= 1,
  Large= 2,
  Gigantic= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BallBouncinessOption{
  Default= 0,
  Low= 1,
  High= 2,
  Super_High= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BoostOption{
  Normal_Boost= 0,
  Unlimited_Boost= 1,
  Slow_Recharge= 2,
  Rapid_Recharge= 3,
  No_Boost= 4
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum RumbleOption{
  No_Rumble= 0,
  Default= 1,
  Slow= 2,
  Civilized= 3,
  Destruction_Derby= 4,
  Spring_Loaded= 5,
  Spikes_Only= 6,
  Spike_Rush= 7
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum BoostStrengthOption{
  One= 0,
  OneAndAHalf= 1,
  Two= 2,
  Ten= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum GravityOption{
  Default= 0,
  Low= 1,
  High= 2,
  Super_High= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum DemolishOption{
  Default= 0,
  Disabled= 1,
  Friendly_Fire= 2,
  On_Contact= 3,
  On_Contact_FF= 4
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum RespawnTimeOption{
  Three_Seconds= 0,
  Two_Seconds= 1,
  One_Seconds= 2,
  Disable_Goal_Reset= 3
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum ExistingMatchBehavior{
  /**
   * Restart the match if any match settings differ. This is the default because old RLBot always worked this way.
   */
  Restart_If_Different= 0,

  /**
   * Always restart the match, even if config is identical
   */
  Restart= 1,

  /**
   * Never restart an existing match, just try to remove or spawn cars to match the configuration.
   * If we are not in the middle of a match, a match will be started. Handy for LAN matches.
   */
  Continue_And_Spawn= 2
}};

/**
 * @enum {number}
 */
export namespace rlbot.flat{
export enum GameMessage{
  NONE= 0,
  PlayerStatEvent= 1,
  PlayerSpectate= 2,
  PlayerInputChange= 3
}};

/**
 * @constructor
 */
export namespace rlbot.flat{
export class ControllerState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ControllerState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ControllerState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ControllerState= obj
 * @returns ControllerState
 */
static getRootAsControllerState(bb:flatbuffers.ByteBuffer, obj?:ControllerState):ControllerState {
  return (obj || new ControllerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ControllerState= obj
 * @returns ControllerState
 */
static getSizePrefixedRootAsControllerState(bb:flatbuffers.ByteBuffer, obj?:ControllerState):ControllerState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ControllerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * -1 for full reverse, 1 for full forward
 *
 * @returns number
 */
throttle():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns number
 */
steer():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for nose down, 1 for nose up
 *
 * @returns number
 */
pitch():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for full left, 1 for full right
 *
 * @returns number
 */
yaw():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * -1 for roll left, 1 for roll right
 *
 * @returns number
 */
roll():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * true if you want to press the jump button
 *
 * @returns boolean
 */
jump():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the boost button
 *
 * @returns boolean
 */
boost():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the handbrake button
 *
 * @returns boolean
 */
handbrake():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * true if you want to press the 'use item' button, used in rumble etc.
 *
 * @returns boolean
 */
useItem():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startControllerState(builder:flatbuffers.Builder) {
  builder.startObject(9);
};

/**
 * @param flatbuffers.Builder builder
 * @param number throttle
 */
static addThrottle(builder:flatbuffers.Builder, throttle:number) {
  builder.addFieldFloat32(0, throttle, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number steer
 */
static addSteer(builder:flatbuffers.Builder, steer:number) {
  builder.addFieldFloat32(1, steer, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pitch
 */
static addPitch(builder:flatbuffers.Builder, pitch:number) {
  builder.addFieldFloat32(2, pitch, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number yaw
 */
static addYaw(builder:flatbuffers.Builder, yaw:number) {
  builder.addFieldFloat32(3, yaw, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number roll
 */
static addRoll(builder:flatbuffers.Builder, roll:number) {
  builder.addFieldFloat32(4, roll, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean jump
 */
static addJump(builder:flatbuffers.Builder, jump:boolean) {
  builder.addFieldInt8(5, +jump, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean boost
 */
static addBoost(builder:flatbuffers.Builder, boost:boolean) {
  builder.addFieldInt8(6, +boost, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean handbrake
 */
static addHandbrake(builder:flatbuffers.Builder, handbrake:boolean) {
  builder.addFieldInt8(7, +handbrake, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean useItem
 */
static addUseItem(builder:flatbuffers.Builder, useItem:boolean) {
  builder.addFieldInt8(8, +useItem, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endControllerState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createControllerState(builder:flatbuffers.Builder, throttle:number, steer:number, pitch:number, yaw:number, roll:number, jump:boolean, boost:boolean, handbrake:boolean, useItem:boolean):flatbuffers.Offset {
  ControllerState.startControllerState(builder);
  ControllerState.addThrottle(builder, throttle);
  ControllerState.addSteer(builder, steer);
  ControllerState.addPitch(builder, pitch);
  ControllerState.addYaw(builder, yaw);
  ControllerState.addRoll(builder, roll);
  ControllerState.addJump(builder, jump);
  ControllerState.addBoost(builder, boost);
  ControllerState.addHandbrake(builder, handbrake);
  ControllerState.addUseItem(builder, useItem);
  return ControllerState.endControllerState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerInput {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerInput
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerInput {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInput= obj
 * @returns PlayerInput
 */
static getRootAsPlayerInput(bb:flatbuffers.ByteBuffer, obj?:PlayerInput):PlayerInput {
  return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInput= obj
 * @returns PlayerInput
 */
static getSizePrefixedRootAsPlayerInput(bb:flatbuffers.ByteBuffer, obj?:PlayerInput):PlayerInput {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerInput()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.ControllerState= obj
 * @returns rlbot.flat.ControllerState|null
 */
controllerState(obj?:rlbot.flat.ControllerState):rlbot.flat.ControllerState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerInput(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset controllerStateOffset
 */
static addControllerState(builder:flatbuffers.Builder, controllerStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, controllerStateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerInput(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerInput(builder:flatbuffers.Builder, playerIndex:number, controllerStateOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerInput.startPlayerInput(builder);
  PlayerInput.addPlayerIndex(builder, playerIndex);
  PlayerInput.addControllerState(builder, controllerStateOffset);
  return PlayerInput.endPlayerInput(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Vector3 {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Vector3
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Vector3 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
z():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @returns flatbuffers.Offset
 */
static createVector3(builder:flatbuffers.Builder, x: number, y: number, z: number):flatbuffers.Offset {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

}
}
/**
 * Expresses the rotation state of an object in Euler angles, with values in radians.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class Rotator {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Rotator
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Rotator {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
pitch():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
yaw():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
roll():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number pitch
 * @param number yaw
 * @param number roll
 * @returns flatbuffers.Offset
 */
static createRotator(builder:flatbuffers.Builder, pitch: number, yaw: number, roll: number):flatbuffers.Offset {
  builder.prep(4, 12);
  builder.writeFloat32(roll);
  builder.writeFloat32(yaw);
  builder.writeFloat32(pitch);
  return builder.offset();
};

}
}
/**
 * Expresses the rotation state of an object.
 * Learn about quaternions here: https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
 * You can tinker with them here to build an intuition: https://quaternions.online/
 *
 * @constructor
 */
export namespace rlbot.flat{
export class Quaternion {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Quaternion
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Quaternion {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
};

/**
 * @returns number
 */
z():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
};

/**
 * @returns number
 */
w():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @param number w
 * @returns flatbuffers.Offset
 */
static createQuaternion(builder:flatbuffers.Builder, x: number, y: number, z: number, w: number):flatbuffers.Offset {
  builder.prep(4, 16);
  builder.writeFloat32(w);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class BoxShape {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BoxShape
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BoxShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoxShape= obj
 * @returns BoxShape
 */
static getRootAsBoxShape(bb:flatbuffers.ByteBuffer, obj?:BoxShape):BoxShape {
  return (obj || new BoxShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoxShape= obj
 * @returns BoxShape
 */
static getSizePrefixedRootAsBoxShape(bb:flatbuffers.ByteBuffer, obj?:BoxShape):BoxShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoxShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
length():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
width():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBoxShape(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param number length
 */
static addLength(builder:flatbuffers.Builder, length:number) {
  builder.addFieldFloat32(0, length, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number width
 */
static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(1, width, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(2, height, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBoxShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBoxShape(builder:flatbuffers.Builder, length:number, width:number, height:number):flatbuffers.Offset {
  BoxShape.startBoxShape(builder);
  BoxShape.addLength(builder, length);
  BoxShape.addWidth(builder, width);
  BoxShape.addHeight(builder, height);
  return BoxShape.endBoxShape(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class SphereShape {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns SphereShape
 */
__init(i:number, bb:flatbuffers.ByteBuffer):SphereShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param SphereShape= obj
 * @returns SphereShape
 */
static getRootAsSphereShape(bb:flatbuffers.ByteBuffer, obj?:SphereShape):SphereShape {
  return (obj || new SphereShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param SphereShape= obj
 * @returns SphereShape
 */
static getSizePrefixedRootAsSphereShape(bb:flatbuffers.ByteBuffer, obj?:SphereShape):SphereShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SphereShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
diameter():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startSphereShape(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number diameter
 */
static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat32(0, diameter, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endSphereShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createSphereShape(builder:flatbuffers.Builder, diameter:number):flatbuffers.Offset {
  SphereShape.startSphereShape(builder);
  SphereShape.addDiameter(builder, diameter);
  return SphereShape.endSphereShape(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class CylinderShape {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CylinderShape
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CylinderShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CylinderShape= obj
 * @returns CylinderShape
 */
static getRootAsCylinderShape(bb:flatbuffers.ByteBuffer, obj?:CylinderShape):CylinderShape {
  return (obj || new CylinderShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CylinderShape= obj
 * @returns CylinderShape
 */
static getSizePrefixedRootAsCylinderShape(bb:flatbuffers.ByteBuffer, obj?:CylinderShape):CylinderShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CylinderShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
diameter():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCylinderShape(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number diameter
 */
static addDiameter(builder:flatbuffers.Builder, diameter:number) {
  builder.addFieldFloat32(0, diameter, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(1, height, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCylinderShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCylinderShape(builder:flatbuffers.Builder, diameter:number, height:number):flatbuffers.Offset {
  CylinderShape.startCylinderShape(builder);
  CylinderShape.addDiameter(builder, diameter);
  CylinderShape.addHeight(builder, height);
  return CylinderShape.endCylinderShape(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Touch {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Touch
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Touch {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Touch= obj
 * @returns Touch
 */
static getRootAsTouch(bb:flatbuffers.ByteBuffer, obj?:Touch):Touch {
  return (obj || new Touch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Touch= obj
 * @returns Touch
 */
static getSizePrefixedRootAsTouch(bb:flatbuffers.ByteBuffer, obj?:Touch):Touch {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Touch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of the player involved with the touch.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
playerName():string|null
playerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
playerName(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Seconds that had elapsed in the game when the touch occurred.
 *
 * @returns number
 */
gameSeconds():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The point of contact for the touch.
 *
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * The direction of the touch.
 *
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
normal(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * The Team which the touch belongs to, 0 for blue 1 for orange.
 *
 * @returns number
 */
team():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * The index of the player involved with the touch.
 *
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTouch(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playerNameOffset
 */
static addPlayerName(builder:flatbuffers.Builder, playerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerNameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gameSeconds
 */
static addGameSeconds(builder:flatbuffers.Builder, gameSeconds:number) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset normalOffset
 */
static addNormal(builder:flatbuffers.Builder, normalOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, normalOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number team
 */
static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(4, team, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(5, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTouch(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTouch(builder:flatbuffers.Builder, playerNameOffset:flatbuffers.Offset, gameSeconds:number, locationOffset:flatbuffers.Offset, normalOffset:flatbuffers.Offset, team:number, playerIndex:number):flatbuffers.Offset {
  Touch.startTouch(builder);
  Touch.addPlayerName(builder, playerNameOffset);
  Touch.addGameSeconds(builder, gameSeconds);
  Touch.addLocation(builder, locationOffset);
  Touch.addNormal(builder, normalOffset);
  Touch.addTeam(builder, team);
  Touch.addPlayerIndex(builder, playerIndex);
  return Touch.endTouch(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class ScoreInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ScoreInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ScoreInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ScoreInfo= obj
 * @returns ScoreInfo
 */
static getRootAsScoreInfo(bb:flatbuffers.ByteBuffer, obj?:ScoreInfo):ScoreInfo {
  return (obj || new ScoreInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ScoreInfo= obj
 * @returns ScoreInfo
 */
static getSizePrefixedRootAsScoreInfo(bb:flatbuffers.ByteBuffer, obj?:ScoreInfo):ScoreInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScoreInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
score():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
goals():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
ownGoals():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
assists():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
saves():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
shots():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
demolitions():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startScoreInfo(builder:flatbuffers.Builder) {
  builder.startObject(7);
};

/**
 * @param flatbuffers.Builder builder
 * @param number score
 */
static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(0, score, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number goals
 */
static addGoals(builder:flatbuffers.Builder, goals:number) {
  builder.addFieldInt32(1, goals, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number ownGoals
 */
static addOwnGoals(builder:flatbuffers.Builder, ownGoals:number) {
  builder.addFieldInt32(2, ownGoals, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number assists
 */
static addAssists(builder:flatbuffers.Builder, assists:number) {
  builder.addFieldInt32(3, assists, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number saves
 */
static addSaves(builder:flatbuffers.Builder, saves:number) {
  builder.addFieldInt32(4, saves, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number shots
 */
static addShots(builder:flatbuffers.Builder, shots:number) {
  builder.addFieldInt32(5, shots, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number demolitions
 */
static addDemolitions(builder:flatbuffers.Builder, demolitions:number) {
  builder.addFieldInt32(6, demolitions, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endScoreInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createScoreInfo(builder:flatbuffers.Builder, score:number, goals:number, ownGoals:number, assists:number, saves:number, shots:number, demolitions:number):flatbuffers.Offset {
  ScoreInfo.startScoreInfo(builder);
  ScoreInfo.addScore(builder, score);
  ScoreInfo.addGoals(builder, goals);
  ScoreInfo.addOwnGoals(builder, ownGoals);
  ScoreInfo.addAssists(builder, assists);
  ScoreInfo.addSaves(builder, saves);
  ScoreInfo.addShots(builder, shots);
  ScoreInfo.addDemolitions(builder, demolitions);
  return ScoreInfo.endScoreInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Physics {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Physics
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Physics {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Physics= obj
 * @returns Physics
 */
static getRootAsPhysics(bb:flatbuffers.ByteBuffer, obj?:Physics):Physics {
  return (obj || new Physics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Physics= obj
 * @returns Physics
 */
static getSizePrefixedRootAsPhysics(bb:flatbuffers.ByteBuffer, obj?:Physics):Physics {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Physics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Rotator= obj
 * @returns rlbot.flat.Rotator|null
 */
rotation(obj?:rlbot.flat.Rotator):rlbot.flat.Rotator|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
velocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
angularVelocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPhysics(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset rotationOffset
 */
static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset velocityOffset
 */
static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset angularVelocityOffset
 */
static addAngularVelocity(builder:flatbuffers.Builder, angularVelocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, angularVelocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPhysics(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPhysics(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset, rotationOffset:flatbuffers.Offset, velocityOffset:flatbuffers.Offset, angularVelocityOffset:flatbuffers.Offset):flatbuffers.Offset {
  Physics.startPhysics(builder);
  Physics.addLocation(builder, locationOffset);
  Physics.addRotation(builder, rotationOffset);
  Physics.addVelocity(builder, velocityOffset);
  Physics.addAngularVelocity(builder, angularVelocityOffset);
  return Physics.endPhysics(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInfo= obj
 * @returns PlayerInfo
 */
static getRootAsPlayerInfo(bb:flatbuffers.ByteBuffer, obj?:PlayerInfo):PlayerInfo {
  return (obj || new PlayerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInfo= obj
 * @returns PlayerInfo
 */
static getSizePrefixedRootAsPlayerInfo(bb:flatbuffers.ByteBuffer, obj?:PlayerInfo):PlayerInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Physics= obj
 * @returns rlbot.flat.Physics|null
 */
physics(obj?:rlbot.flat.Physics):rlbot.flat.Physics|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.ScoreInfo= obj
 * @returns rlbot.flat.ScoreInfo|null
 */
scoreInfo(obj?:rlbot.flat.ScoreInfo):rlbot.flat.ScoreInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ScoreInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns boolean
 */
isDemolished():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
 *
 * @returns boolean
 */
hasWheelContact():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
isSupersonic():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
isBot():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
 *
 * @returns boolean
 */
jumped():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 *  True if player has double jumped. False does not mean you have a jump remaining, because the
 *  aerial timer can run out, and that doesn't affect this flag.
 *
 * @returns boolean
 */
doubleJumped():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
team():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
boost():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.BoxShape= obj
 * @returns rlbot.flat.BoxShape|null
 */
hitbox(obj?:rlbot.flat.BoxShape):rlbot.flat.BoxShape|null {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new rlbot.flat.BoxShape()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
hitboxOffset(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * In the case where the requested player index is not available, spawnId will help
 * the framework figure out what index was actually assigned to this player instead.
 *
 * @returns number
 */
spawnId():number {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerInfo(builder:flatbuffers.Builder) {
  builder.startObject(14);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset physicsOffset
 */
static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset scoreInfoOffset
 */
static addScoreInfo(builder:flatbuffers.Builder, scoreInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, scoreInfoOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isDemolished
 */
static addIsDemolished(builder:flatbuffers.Builder, isDemolished:boolean) {
  builder.addFieldInt8(2, +isDemolished, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasWheelContact
 */
static addHasWheelContact(builder:flatbuffers.Builder, hasWheelContact:boolean) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isSupersonic
 */
static addIsSupersonic(builder:flatbuffers.Builder, isSupersonic:boolean) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isBot
 */
static addIsBot(builder:flatbuffers.Builder, isBot:boolean) {
  builder.addFieldInt8(5, +isBot, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean jumped
 */
static addJumped(builder:flatbuffers.Builder, jumped:boolean) {
  builder.addFieldInt8(6, +jumped, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean doubleJumped
 */
static addDoubleJumped(builder:flatbuffers.Builder, doubleJumped:boolean) {
  builder.addFieldInt8(7, +doubleJumped, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number team
 */
static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(9, team, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boost
 */
static addBoost(builder:flatbuffers.Builder, boost:number) {
  builder.addFieldInt32(10, boost, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset hitboxOffset
 */
static addHitbox(builder:flatbuffers.Builder, hitboxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, hitboxOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset hitboxOffsetOffset
 */
static addHitboxOffset(builder:flatbuffers.Builder, hitboxOffsetOffset:flatbuffers.Offset) {
  builder.addFieldStruct(12, hitboxOffsetOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number spawnId
 */
static addSpawnId(builder:flatbuffers.Builder, spawnId:number) {
  builder.addFieldInt32(13, spawnId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerInfo(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset, scoreInfoOffset:flatbuffers.Offset, isDemolished:boolean, hasWheelContact:boolean, isSupersonic:boolean, isBot:boolean, jumped:boolean, doubleJumped:boolean, nameOffset:flatbuffers.Offset, team:number, boost:number, hitboxOffset:flatbuffers.Offset, hitboxOffsetOffset:flatbuffers.Offset, spawnId:number):flatbuffers.Offset {
  PlayerInfo.startPlayerInfo(builder);
  PlayerInfo.addPhysics(builder, physicsOffset);
  PlayerInfo.addScoreInfo(builder, scoreInfoOffset);
  PlayerInfo.addIsDemolished(builder, isDemolished);
  PlayerInfo.addHasWheelContact(builder, hasWheelContact);
  PlayerInfo.addIsSupersonic(builder, isSupersonic);
  PlayerInfo.addIsBot(builder, isBot);
  PlayerInfo.addJumped(builder, jumped);
  PlayerInfo.addDoubleJumped(builder, doubleJumped);
  PlayerInfo.addName(builder, nameOffset);
  PlayerInfo.addTeam(builder, team);
  PlayerInfo.addBoost(builder, boost);
  PlayerInfo.addHitbox(builder, hitboxOffset);
  PlayerInfo.addHitboxOffset(builder, hitboxOffsetOffset);
  PlayerInfo.addSpawnId(builder, spawnId);
  return PlayerInfo.endPlayerInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DropShotBallInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DropShotBallInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DropShotBallInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DropShotBallInfo= obj
 * @returns DropShotBallInfo
 */
static getRootAsDropShotBallInfo(bb:flatbuffers.ByteBuffer, obj?:DropShotBallInfo):DropShotBallInfo {
  return (obj || new DropShotBallInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DropShotBallInfo= obj
 * @returns DropShotBallInfo
 */
static getSizePrefixedRootAsDropShotBallInfo(bb:flatbuffers.ByteBuffer, obj?:DropShotBallInfo):DropShotBallInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DropShotBallInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
absorbedForce():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
damageIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
forceAccumRecent():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDropShotBallInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param number absorbedForce
 */
static addAbsorbedForce(builder:flatbuffers.Builder, absorbedForce:number) {
  builder.addFieldFloat32(0, absorbedForce, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number damageIndex
 */
static addDamageIndex(builder:flatbuffers.Builder, damageIndex:number) {
  builder.addFieldInt32(1, damageIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number forceAccumRecent
 */
static addForceAccumRecent(builder:flatbuffers.Builder, forceAccumRecent:number) {
  builder.addFieldFloat32(2, forceAccumRecent, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDropShotBallInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDropShotBallInfo(builder:flatbuffers.Builder, absorbedForce:number, damageIndex:number, forceAccumRecent:number):flatbuffers.Offset {
  DropShotBallInfo.startDropShotBallInfo(builder);
  DropShotBallInfo.addAbsorbedForce(builder, absorbedForce);
  DropShotBallInfo.addDamageIndex(builder, damageIndex);
  DropShotBallInfo.addForceAccumRecent(builder, forceAccumRecent);
  return DropShotBallInfo.endDropShotBallInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class BallInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BallInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BallInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallInfo= obj
 * @returns BallInfo
 */
static getRootAsBallInfo(bb:flatbuffers.ByteBuffer, obj?:BallInfo):BallInfo {
  return (obj || new BallInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallInfo= obj
 * @returns BallInfo
 */
static getSizePrefixedRootAsBallInfo(bb:flatbuffers.ByteBuffer, obj?:BallInfo):BallInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BallInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Physics= obj
 * @returns rlbot.flat.Physics|null
 */
physics(obj?:rlbot.flat.Physics):rlbot.flat.Physics|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Physics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.Touch= obj
 * @returns rlbot.flat.Touch|null
 */
latestTouch(obj?:rlbot.flat.Touch):rlbot.flat.Touch|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Touch()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.DropShotBallInfo= obj
 * @returns rlbot.flat.DropShotBallInfo|null
 */
dropShotInfo(obj?:rlbot.flat.DropShotBallInfo):rlbot.flat.DropShotBallInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.DropShotBallInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns rlbot.flat.CollisionShape
 */
shapeType():rlbot.flat.CollisionShape {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : rlbot.flat.CollisionShape.NONE;
};

/**
 * @param flatbuffers.Table obj
 * @returns ?flatbuffers.Table
 */
shape<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBallInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset physicsOffset
 */
static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset latestTouchOffset
 */
static addLatestTouch(builder:flatbuffers.Builder, latestTouchOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, latestTouchOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dropShotInfoOffset
 */
static addDropShotInfo(builder:flatbuffers.Builder, dropShotInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dropShotInfoOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.CollisionShape shapeType
 */
static addShapeType(builder:flatbuffers.Builder, shapeType:rlbot.flat.CollisionShape) {
  builder.addFieldInt8(3, shapeType, rlbot.flat.CollisionShape.NONE);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset shapeOffset
 */
static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, shapeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBallInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBallInfo(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset, latestTouchOffset:flatbuffers.Offset, dropShotInfoOffset:flatbuffers.Offset, shapeType:rlbot.flat.CollisionShape, shapeOffset:flatbuffers.Offset):flatbuffers.Offset {
  BallInfo.startBallInfo(builder);
  BallInfo.addPhysics(builder, physicsOffset);
  BallInfo.addLatestTouch(builder, latestTouchOffset);
  BallInfo.addDropShotInfo(builder, dropShotInfoOffset);
  BallInfo.addShapeType(builder, shapeType);
  BallInfo.addShape(builder, shapeOffset);
  return BallInfo.endBallInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class BoostPadState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BoostPadState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BoostPadState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoostPadState= obj
 * @returns BoostPadState
 */
static getRootAsBoostPadState(bb:flatbuffers.ByteBuffer, obj?:BoostPadState):BoostPadState {
  return (obj || new BoostPadState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoostPadState= obj
 * @returns BoostPadState
 */
static getSizePrefixedRootAsBoostPadState(bb:flatbuffers.ByteBuffer, obj?:BoostPadState):BoostPadState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoostPadState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * True if the boost can be picked up
 *
 * @returns boolean
 */
isActive():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
 *
 * @returns number
 */
timer():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBoostPadState(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isActive
 */
static addIsActive(builder:flatbuffers.Builder, isActive:boolean) {
  builder.addFieldInt8(0, +isActive, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number timer
 */
static addTimer(builder:flatbuffers.Builder, timer:number) {
  builder.addFieldFloat32(1, timer, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBoostPadState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBoostPadState(builder:flatbuffers.Builder, isActive:boolean, timer:number):flatbuffers.Offset {
  BoostPadState.startBoostPadState(builder);
  BoostPadState.addIsActive(builder, isActive);
  BoostPadState.addTimer(builder, timer);
  return BoostPadState.endBoostPadState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DropshotTile {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DropshotTile
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DropshotTile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DropshotTile= obj
 * @returns DropshotTile
 */
static getRootAsDropshotTile(bb:flatbuffers.ByteBuffer, obj?:DropshotTile):DropshotTile {
  return (obj || new DropshotTile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DropshotTile= obj
 * @returns DropshotTile
 */
static getSizePrefixedRootAsDropshotTile(bb:flatbuffers.ByteBuffer, obj?:DropshotTile):DropshotTile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DropshotTile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The amount of damage the tile has sustained.
 *
 * @returns rlbot.flat.TileState
 */
tileState():rlbot.flat.TileState {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.TileState.Unknown;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDropshotTile(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.TileState tileState
 */
static addTileState(builder:flatbuffers.Builder, tileState:rlbot.flat.TileState) {
  builder.addFieldInt8(0, tileState, rlbot.flat.TileState.Unknown);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDropshotTile(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDropshotTile(builder:flatbuffers.Builder, tileState:rlbot.flat.TileState):flatbuffers.Offset {
  DropshotTile.startDropshotTile(builder);
  DropshotTile.addTileState(builder, tileState);
  return DropshotTile.endDropshotTile(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class GameInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns GameInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):GameInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameInfo= obj
 * @returns GameInfo
 */
static getRootAsGameInfo(bb:flatbuffers.ByteBuffer, obj?:GameInfo):GameInfo {
  return (obj || new GameInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameInfo= obj
 * @returns GameInfo
 */
static getSizePrefixedRootAsGameInfo(bb:flatbuffers.ByteBuffer, obj?:GameInfo):GameInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
secondsElapsed():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
gameTimeRemaining():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns boolean
 */
isOvertime():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
isUnlimitedTime():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * True when cars are allowed to move, and during the pause menu. False during replays.
 *
 * @returns boolean
 */
isRoundActive():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * True when the clock is paused due to kickoff, but false during kickoff countdown. In other words, it is true
 * while cars can move during kickoff. Note that if both players sit still, game clock start and this will become false.
 *
 * @returns boolean
 */
isKickoffPause():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * Turns true after final replay, the moment the 'winner' screen appears. Remains true during next match
 * countdown. Turns false again the moment the 'choose team' screen appears.
 *
 * @returns boolean
 */
isMatchEnded():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns number
 */
worldGravityZ():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * Game speed multiplier, 1.0 is regular game speed.
 *
 * @returns number
 */
gameSpeed():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * Tracks the number of physics frames the game has computed.
 * May increase by more than one across consecutive packets.
 * Data type will roll over after 207 days at 120Hz.
 *
 * @returns number
 */
frameNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGameInfo(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param number secondsElapsed
 */
static addSecondsElapsed(builder:flatbuffers.Builder, secondsElapsed:number) {
  builder.addFieldFloat32(0, secondsElapsed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gameTimeRemaining
 */
static addGameTimeRemaining(builder:flatbuffers.Builder, gameTimeRemaining:number) {
  builder.addFieldFloat32(1, gameTimeRemaining, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isOvertime
 */
static addIsOvertime(builder:flatbuffers.Builder, isOvertime:boolean) {
  builder.addFieldInt8(2, +isOvertime, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isUnlimitedTime
 */
static addIsUnlimitedTime(builder:flatbuffers.Builder, isUnlimitedTime:boolean) {
  builder.addFieldInt8(3, +isUnlimitedTime, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isRoundActive
 */
static addIsRoundActive(builder:flatbuffers.Builder, isRoundActive:boolean) {
  builder.addFieldInt8(4, +isRoundActive, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isKickoffPause
 */
static addIsKickoffPause(builder:flatbuffers.Builder, isKickoffPause:boolean) {
  builder.addFieldInt8(5, +isKickoffPause, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isMatchEnded
 */
static addIsMatchEnded(builder:flatbuffers.Builder, isMatchEnded:boolean) {
  builder.addFieldInt8(6, +isMatchEnded, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number worldGravityZ
 */
static addWorldGravityZ(builder:flatbuffers.Builder, worldGravityZ:number) {
  builder.addFieldFloat32(7, worldGravityZ, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gameSpeed
 */
static addGameSpeed(builder:flatbuffers.Builder, gameSpeed:number) {
  builder.addFieldFloat32(8, gameSpeed, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameNum
 */
static addFrameNum(builder:flatbuffers.Builder, frameNum:number) {
  builder.addFieldInt32(9, frameNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGameInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createGameInfo(builder:flatbuffers.Builder, secondsElapsed:number, gameTimeRemaining:number, isOvertime:boolean, isUnlimitedTime:boolean, isRoundActive:boolean, isKickoffPause:boolean, isMatchEnded:boolean, worldGravityZ:number, gameSpeed:number, frameNum:number):flatbuffers.Offset {
  GameInfo.startGameInfo(builder);
  GameInfo.addSecondsElapsed(builder, secondsElapsed);
  GameInfo.addGameTimeRemaining(builder, gameTimeRemaining);
  GameInfo.addIsOvertime(builder, isOvertime);
  GameInfo.addIsUnlimitedTime(builder, isUnlimitedTime);
  GameInfo.addIsRoundActive(builder, isRoundActive);
  GameInfo.addIsKickoffPause(builder, isKickoffPause);
  GameInfo.addIsMatchEnded(builder, isMatchEnded);
  GameInfo.addWorldGravityZ(builder, worldGravityZ);
  GameInfo.addGameSpeed(builder, gameSpeed);
  GameInfo.addFrameNum(builder, frameNum);
  return GameInfo.endGameInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class TeamInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TeamInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TeamInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TeamInfo= obj
 * @returns TeamInfo
 */
static getRootAsTeamInfo(bb:flatbuffers.ByteBuffer, obj?:TeamInfo):TeamInfo {
  return (obj || new TeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TeamInfo= obj
 * @returns TeamInfo
 */
static getSizePrefixedRootAsTeamInfo(bb:flatbuffers.ByteBuffer, obj?:TeamInfo):TeamInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
teamIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * number of goals scored.
 *
 * @returns number
 */
score():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTeamInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number teamIndex
 */
static addTeamIndex(builder:flatbuffers.Builder, teamIndex:number) {
  builder.addFieldInt32(0, teamIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number score
 */
static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt32(1, score, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTeamInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTeamInfo(builder:flatbuffers.Builder, teamIndex:number, score:number):flatbuffers.Offset {
  TeamInfo.startTeamInfo(builder);
  TeamInfo.addTeamIndex(builder, teamIndex);
  TeamInfo.addScore(builder, score);
  return TeamInfo.endTeamInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class GameTickPacket {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns GameTickPacket
 */
__init(i:number, bb:flatbuffers.ByteBuffer):GameTickPacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameTickPacket= obj
 * @returns GameTickPacket
 */
static getRootAsGameTickPacket(bb:flatbuffers.ByteBuffer, obj?:GameTickPacket):GameTickPacket {
  return (obj || new GameTickPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameTickPacket= obj
 * @returns GameTickPacket
 */
static getSizePrefixedRootAsGameTickPacket(bb:flatbuffers.ByteBuffer, obj?:GameTickPacket):GameTickPacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameTickPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.PlayerInfo= obj
 * @returns rlbot.flat.PlayerInfo
 */
players(index: number, obj?:rlbot.flat.PlayerInfo):rlbot.flat.PlayerInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PlayerInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
playersLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param rlbot.flat.BoostPadState= obj
 * @returns rlbot.flat.BoostPadState
 */
boostPadStates(index: number, obj?:rlbot.flat.BoostPadState):rlbot.flat.BoostPadState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.BoostPadState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
boostPadStatesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.BallInfo= obj
 * @returns rlbot.flat.BallInfo|null
 */
ball(obj?:rlbot.flat.BallInfo):rlbot.flat.BallInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.BallInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.GameInfo= obj
 * @returns rlbot.flat.GameInfo|null
 */
gameInfo(obj?:rlbot.flat.GameInfo):rlbot.flat.GameInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.GameInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param number index
 * @param rlbot.flat.DropshotTile= obj
 * @returns rlbot.flat.DropshotTile
 */
tileInformation(index: number, obj?:rlbot.flat.DropshotTile):rlbot.flat.DropshotTile|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.DropshotTile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
tileInformationLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param rlbot.flat.TeamInfo= obj
 * @returns rlbot.flat.TeamInfo
 */
teams(index: number, obj?:rlbot.flat.TeamInfo):rlbot.flat.TeamInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new rlbot.flat.TeamInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
teamsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGameTickPacket(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playersOffset
 */
static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset boostPadStatesOffset
 */
static addBoostPadStates(builder:flatbuffers.Builder, boostPadStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, boostPadStatesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createBoostPadStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBoostPadStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset ballOffset
 */
static addBall(builder:flatbuffers.Builder, ballOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ballOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset gameInfoOffset
 */
static addGameInfo(builder:flatbuffers.Builder, gameInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, gameInfoOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset tileInformationOffset
 */
static addTileInformation(builder:flatbuffers.Builder, tileInformationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tileInformationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createTileInformationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startTileInformationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset teamsOffset
 */
static addTeams(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, teamsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGameTickPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createGameTickPacket(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset, boostPadStatesOffset:flatbuffers.Offset, ballOffset:flatbuffers.Offset, gameInfoOffset:flatbuffers.Offset, tileInformationOffset:flatbuffers.Offset, teamsOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameTickPacket.startGameTickPacket(builder);
  GameTickPacket.addPlayers(builder, playersOffset);
  GameTickPacket.addBoostPadStates(builder, boostPadStatesOffset);
  GameTickPacket.addBall(builder, ballOffset);
  GameTickPacket.addGameInfo(builder, gameInfoOffset);
  GameTickPacket.addTileInformation(builder, tileInformationOffset);
  GameTickPacket.addTeams(builder, teamsOffset);
  return GameTickPacket.endGameTickPacket(builder);
}
}
}
/**
 * The state of a rigid body in Rocket League's physics engine.
 * This gets updated in time with the physics tick, not the rendering framerate.
 * The frame field will be incremented every time the physics engine ticks.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class RigidBodyState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RigidBodyState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RigidBodyState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RigidBodyState= obj
 * @returns RigidBodyState
 */
static getRootAsRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:RigidBodyState):RigidBodyState {
  return (obj || new RigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RigidBodyState= obj
 * @returns RigidBodyState
 */
static getSizePrefixedRootAsRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:RigidBodyState):RigidBodyState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
frame():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Quaternion= obj
 * @returns rlbot.flat.Quaternion|null
 */
rotation(obj?:rlbot.flat.Quaternion):rlbot.flat.Quaternion|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Quaternion()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
velocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
angularVelocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startRigidBodyState(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frame
 */
static addFrame(builder:flatbuffers.Builder, frame:number) {
  builder.addFieldInt32(0, frame, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset rotationOffset
 */
static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, rotationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset velocityOffset
 */
static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, velocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset angularVelocityOffset
 */
static addAngularVelocity(builder:flatbuffers.Builder, angularVelocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, angularVelocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRigidBodyState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRigidBodyState(builder:flatbuffers.Builder, frame:number, locationOffset:flatbuffers.Offset, rotationOffset:flatbuffers.Offset, velocityOffset:flatbuffers.Offset, angularVelocityOffset:flatbuffers.Offset):flatbuffers.Offset {
  RigidBodyState.startRigidBodyState(builder);
  RigidBodyState.addFrame(builder, frame);
  RigidBodyState.addLocation(builder, locationOffset);
  RigidBodyState.addRotation(builder, rotationOffset);
  RigidBodyState.addVelocity(builder, velocityOffset);
  RigidBodyState.addAngularVelocity(builder, angularVelocityOffset);
  return RigidBodyState.endRigidBodyState(builder);
}
}
}
/**
 * Rigid body state for a player / car in the game. Includes the latest
 * controller input, which is otherwise difficult to correlate with consequences.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerRigidBodyState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerRigidBodyState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerRigidBodyState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerRigidBodyState= obj
 * @returns PlayerRigidBodyState
 */
static getRootAsPlayerRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:PlayerRigidBodyState):PlayerRigidBodyState {
  return (obj || new PlayerRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerRigidBodyState= obj
 * @returns PlayerRigidBodyState
 */
static getSizePrefixedRootAsPlayerRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:PlayerRigidBodyState):PlayerRigidBodyState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.RigidBodyState= obj
 * @returns rlbot.flat.RigidBodyState|null
 */
state(obj?:rlbot.flat.RigidBodyState):rlbot.flat.RigidBodyState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RigidBodyState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.ControllerState= obj
 * @returns rlbot.flat.ControllerState|null
 */
input(obj?:rlbot.flat.ControllerState):rlbot.flat.ControllerState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerRigidBodyState(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset stateOffset
 */
static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset inputOffset
 */
static addInput(builder:flatbuffers.Builder, inputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, inputOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerRigidBodyState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerRigidBodyState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset, inputOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerRigidBodyState.startPlayerRigidBodyState(builder);
  PlayerRigidBodyState.addState(builder, stateOffset);
  PlayerRigidBodyState.addInput(builder, inputOffset);
  return PlayerRigidBodyState.endPlayerRigidBodyState(builder);
}
}
}
/**
 * Rigid body state for the ball.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class BallRigidBodyState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BallRigidBodyState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BallRigidBodyState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallRigidBodyState= obj
 * @returns BallRigidBodyState
 */
static getRootAsBallRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:BallRigidBodyState):BallRigidBodyState {
  return (obj || new BallRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallRigidBodyState= obj
 * @returns BallRigidBodyState
 */
static getSizePrefixedRootAsBallRigidBodyState(bb:flatbuffers.ByteBuffer, obj?:BallRigidBodyState):BallRigidBodyState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BallRigidBodyState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.RigidBodyState= obj
 * @returns rlbot.flat.RigidBodyState|null
 */
state(obj?:rlbot.flat.RigidBodyState):rlbot.flat.RigidBodyState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RigidBodyState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBallRigidBodyState(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset stateOffset
 */
static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBallRigidBodyState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBallRigidBodyState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  BallRigidBodyState.startBallRigidBodyState(builder);
  BallRigidBodyState.addState(builder, stateOffset);
  return BallRigidBodyState.endBallRigidBodyState(builder);
}
}
}
/**
 * Contains all rigid body state information.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class RigidBodyTick {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RigidBodyTick
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RigidBodyTick {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RigidBodyTick= obj
 * @returns RigidBodyTick
 */
static getRootAsRigidBodyTick(bb:flatbuffers.ByteBuffer, obj?:RigidBodyTick):RigidBodyTick {
  return (obj || new RigidBodyTick()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RigidBodyTick= obj
 * @returns RigidBodyTick
 */
static getSizePrefixedRootAsRigidBodyTick(bb:flatbuffers.ByteBuffer, obj?:RigidBodyTick):RigidBodyTick {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RigidBodyTick()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.BallRigidBodyState= obj
 * @returns rlbot.flat.BallRigidBodyState|null
 */
ball(obj?:rlbot.flat.BallRigidBodyState):rlbot.flat.BallRigidBodyState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.BallRigidBodyState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param number index
 * @param rlbot.flat.PlayerRigidBodyState= obj
 * @returns rlbot.flat.PlayerRigidBodyState
 */
players(index: number, obj?:rlbot.flat.PlayerRigidBodyState):rlbot.flat.PlayerRigidBodyState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.PlayerRigidBodyState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
playersLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startRigidBodyTick(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset ballOffset
 */
static addBall(builder:flatbuffers.Builder, ballOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ballOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playersOffset
 */
static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playersOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRigidBodyTick(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRigidBodyTick(builder:flatbuffers.Builder, ballOffset:flatbuffers.Offset, playersOffset:flatbuffers.Offset):flatbuffers.Offset {
  RigidBodyTick.startRigidBodyTick(builder);
  RigidBodyTick.addBall(builder, ballOffset);
  RigidBodyTick.addPlayers(builder, playersOffset);
  return RigidBodyTick.endRigidBodyTick(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class GoalInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns GoalInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):GoalInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GoalInfo= obj
 * @returns GoalInfo
 */
static getRootAsGoalInfo(bb:flatbuffers.ByteBuffer, obj?:GoalInfo):GoalInfo {
  return (obj || new GoalInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GoalInfo= obj
 * @returns GoalInfo
 */
static getSizePrefixedRootAsGoalInfo(bb:flatbuffers.ByteBuffer, obj?:GoalInfo):GoalInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GoalInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
teamNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
direction(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns number
 */
width():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGoalInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param number teamNum
 */
static addTeamNum(builder:flatbuffers.Builder, teamNum:number) {
  builder.addFieldInt32(0, teamNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset directionOffset
 */
static addDirection(builder:flatbuffers.Builder, directionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, directionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number width
 */
static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldFloat32(3, width, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(4, height, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGoalInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createGoalInfo(builder:flatbuffers.Builder, teamNum:number, locationOffset:flatbuffers.Offset, directionOffset:flatbuffers.Offset, width:number, height:number):flatbuffers.Offset {
  GoalInfo.startGoalInfo(builder);
  GoalInfo.addTeamNum(builder, teamNum);
  GoalInfo.addLocation(builder, locationOffset);
  GoalInfo.addDirection(builder, directionOffset);
  GoalInfo.addWidth(builder, width);
  GoalInfo.addHeight(builder, height);
  return GoalInfo.endGoalInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class BoostPad {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BoostPad
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BoostPad {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoostPad= obj
 * @returns BoostPad
 */
static getRootAsBoostPad(bb:flatbuffers.ByteBuffer, obj?:BoostPad):BoostPad {
  return (obj || new BoostPad()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BoostPad= obj
 * @returns BoostPad
 */
static getSizePrefixedRootAsBoostPad(bb:flatbuffers.ByteBuffer, obj?:BoostPad):BoostPad {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoostPad()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns boolean
 */
isFullBoost():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBoostPad(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isFullBoost
 */
static addIsFullBoost(builder:flatbuffers.Builder, isFullBoost:boolean) {
  builder.addFieldInt8(1, +isFullBoost, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBoostPad(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBoostPad(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset, isFullBoost:boolean):flatbuffers.Offset {
  BoostPad.startBoostPad(builder);
  BoostPad.addLocation(builder, locationOffset);
  BoostPad.addIsFullBoost(builder, isFullBoost);
  return BoostPad.endBoostPad(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class FieldInfo {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns FieldInfo
 */
__init(i:number, bb:flatbuffers.ByteBuffer):FieldInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param FieldInfo= obj
 * @returns FieldInfo
 */
static getRootAsFieldInfo(bb:flatbuffers.ByteBuffer, obj?:FieldInfo):FieldInfo {
  return (obj || new FieldInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param FieldInfo= obj
 * @returns FieldInfo
 */
static getSizePrefixedRootAsFieldInfo(bb:flatbuffers.ByteBuffer, obj?:FieldInfo):FieldInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FieldInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.BoostPad= obj
 * @returns rlbot.flat.BoostPad
 */
boostPads(index: number, obj?:rlbot.flat.BoostPad):rlbot.flat.BoostPad|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.BoostPad()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
boostPadsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param rlbot.flat.GoalInfo= obj
 * @returns rlbot.flat.GoalInfo
 */
goals(index: number, obj?:rlbot.flat.GoalInfo):rlbot.flat.GoalInfo|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.GoalInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
goalsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startFieldInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset boostPadsOffset
 */
static addBoostPads(builder:flatbuffers.Builder, boostPadsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, boostPadsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createBoostPadsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBoostPadsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset goalsOffset
 */
static addGoals(builder:flatbuffers.Builder, goalsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, goalsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createGoalsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startGoalsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endFieldInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createFieldInfo(builder:flatbuffers.Builder, boostPadsOffset:flatbuffers.Offset, goalsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FieldInfo.startFieldInfo(builder);
  FieldInfo.addBoostPads(builder, boostPadsOffset);
  FieldInfo.addGoals(builder, goalsOffset);
  return FieldInfo.endFieldInfo(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Float {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Float
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Float {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
val():number {
  return this.bb!.readFloat32(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number val
 * @returns flatbuffers.Offset
 */
static createFloat(builder:flatbuffers.Builder, val: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeFloat32(val);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Bool {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Bool
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Bool {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns boolean
 */
val():boolean {
  return !!this.bb!.readInt8(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean val
 * @returns flatbuffers.Offset
 */
static createBool(builder:flatbuffers.Builder, val: boolean):flatbuffers.Offset {
  builder.prep(1, 1);
  builder.writeInt8(+val);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Vector3Partial {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Vector3Partial
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Vector3Partial {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Vector3Partial= obj
 * @returns Vector3Partial
 */
static getRootAsVector3Partial(bb:flatbuffers.ByteBuffer, obj?:Vector3Partial):Vector3Partial {
  return (obj || new Vector3Partial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Vector3Partial= obj
 * @returns Vector3Partial
 */
static getSizePrefixedRootAsVector3Partial(bb:flatbuffers.ByteBuffer, obj?:Vector3Partial):Vector3Partial {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Vector3Partial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
x(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
y(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
z(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startVector3Partial(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset xOffset
 */
static addX(builder:flatbuffers.Builder, xOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, xOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset yOffset
 */
static addY(builder:flatbuffers.Builder, yOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, yOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset zOffset
 */
static addZ(builder:flatbuffers.Builder, zOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, zOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endVector3Partial(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createVector3Partial(builder:flatbuffers.Builder, xOffset:flatbuffers.Offset, yOffset:flatbuffers.Offset, zOffset:flatbuffers.Offset):flatbuffers.Offset {
  Vector3Partial.startVector3Partial(builder);
  Vector3Partial.addX(builder, xOffset);
  Vector3Partial.addY(builder, yOffset);
  Vector3Partial.addZ(builder, zOffset);
  return Vector3Partial.endVector3Partial(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class RotatorPartial {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RotatorPartial
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RotatorPartial {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RotatorPartial= obj
 * @returns RotatorPartial
 */
static getRootAsRotatorPartial(bb:flatbuffers.ByteBuffer, obj?:RotatorPartial):RotatorPartial {
  return (obj || new RotatorPartial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RotatorPartial= obj
 * @returns RotatorPartial
 */
static getSizePrefixedRootAsRotatorPartial(bb:flatbuffers.ByteBuffer, obj?:RotatorPartial):RotatorPartial {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RotatorPartial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
pitch(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
yaw(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
roll(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startRotatorPartial(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pitchOffset
 */
static addPitch(builder:flatbuffers.Builder, pitchOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, pitchOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset yawOffset
 */
static addYaw(builder:flatbuffers.Builder, yawOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, yawOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset rollOffset
 */
static addRoll(builder:flatbuffers.Builder, rollOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, rollOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRotatorPartial(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRotatorPartial(builder:flatbuffers.Builder, pitchOffset:flatbuffers.Offset, yawOffset:flatbuffers.Offset, rollOffset:flatbuffers.Offset):flatbuffers.Offset {
  RotatorPartial.startRotatorPartial(builder);
  RotatorPartial.addPitch(builder, pitchOffset);
  RotatorPartial.addYaw(builder, yawOffset);
  RotatorPartial.addRoll(builder, rollOffset);
  return RotatorPartial.endRotatorPartial(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredPhysics {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredPhysics
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredPhysics {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredPhysics= obj
 * @returns DesiredPhysics
 */
static getRootAsDesiredPhysics(bb:flatbuffers.ByteBuffer, obj?:DesiredPhysics):DesiredPhysics {
  return (obj || new DesiredPhysics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredPhysics= obj
 * @returns DesiredPhysics
 */
static getSizePrefixedRootAsDesiredPhysics(bb:flatbuffers.ByteBuffer, obj?:DesiredPhysics):DesiredPhysics {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredPhysics()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Vector3Partial= obj
 * @returns rlbot.flat.Vector3Partial|null
 */
location(obj?:rlbot.flat.Vector3Partial):rlbot.flat.Vector3Partial|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.RotatorPartial= obj
 * @returns rlbot.flat.RotatorPartial|null
 */
rotation(obj?:rlbot.flat.RotatorPartial):rlbot.flat.RotatorPartial|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.RotatorPartial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3Partial= obj
 * @returns rlbot.flat.Vector3Partial|null
 */
velocity(obj?:rlbot.flat.Vector3Partial):rlbot.flat.Vector3Partial|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3Partial= obj
 * @returns rlbot.flat.Vector3Partial|null
 */
angularVelocity(obj?:rlbot.flat.Vector3Partial):rlbot.flat.Vector3Partial|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3Partial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredPhysics(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset rotationOffset
 */
static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rotationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset velocityOffset
 */
static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, velocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset angularVelocityOffset
 */
static addAngularVelocity(builder:flatbuffers.Builder, angularVelocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, angularVelocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredPhysics(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredPhysics(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset, rotationOffset:flatbuffers.Offset, velocityOffset:flatbuffers.Offset, angularVelocityOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredPhysics.startDesiredPhysics(builder);
  DesiredPhysics.addLocation(builder, locationOffset);
  DesiredPhysics.addRotation(builder, rotationOffset);
  DesiredPhysics.addVelocity(builder, velocityOffset);
  DesiredPhysics.addAngularVelocity(builder, angularVelocityOffset);
  return DesiredPhysics.endDesiredPhysics(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredBallState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredBallState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredBallState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredBallState= obj
 * @returns DesiredBallState
 */
static getRootAsDesiredBallState(bb:flatbuffers.ByteBuffer, obj?:DesiredBallState):DesiredBallState {
  return (obj || new DesiredBallState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredBallState= obj
 * @returns DesiredBallState
 */
static getSizePrefixedRootAsDesiredBallState(bb:flatbuffers.ByteBuffer, obj?:DesiredBallState):DesiredBallState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredBallState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.DesiredPhysics= obj
 * @returns rlbot.flat.DesiredPhysics|null
 */
physics(obj?:rlbot.flat.DesiredPhysics):rlbot.flat.DesiredPhysics|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredBallState(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset physicsOffset
 */
static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredBallState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredBallState(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredBallState.startDesiredBallState(builder);
  DesiredBallState.addPhysics(builder, physicsOffset);
  return DesiredBallState.endDesiredBallState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredCarState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredCarState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredCarState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredCarState= obj
 * @returns DesiredCarState
 */
static getRootAsDesiredCarState(bb:flatbuffers.ByteBuffer, obj?:DesiredCarState):DesiredCarState {
  return (obj || new DesiredCarState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredCarState= obj
 * @returns DesiredCarState
 */
static getSizePrefixedRootAsDesiredCarState(bb:flatbuffers.ByteBuffer, obj?:DesiredCarState):DesiredCarState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredCarState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.DesiredPhysics= obj
 * @returns rlbot.flat.DesiredPhysics|null
 */
physics(obj?:rlbot.flat.DesiredPhysics):rlbot.flat.DesiredPhysics|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredPhysics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
boostAmount(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Bool= obj
 * @returns rlbot.flat.Bool|null
 */
jumped(obj?:rlbot.flat.Bool):rlbot.flat.Bool|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Bool()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Bool= obj
 * @returns rlbot.flat.Bool|null
 */
doubleJumped(obj?:rlbot.flat.Bool):rlbot.flat.Bool|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Bool()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredCarState(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset physicsOffset
 */
static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, physicsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset boostAmountOffset
 */
static addBoostAmount(builder:flatbuffers.Builder, boostAmountOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, boostAmountOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset jumpedOffset
 */
static addJumped(builder:flatbuffers.Builder, jumpedOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, jumpedOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset doubleJumpedOffset
 */
static addDoubleJumped(builder:flatbuffers.Builder, doubleJumpedOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, doubleJumpedOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredCarState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredCarState(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset, boostAmountOffset:flatbuffers.Offset, jumpedOffset:flatbuffers.Offset, doubleJumpedOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredCarState.startDesiredCarState(builder);
  DesiredCarState.addPhysics(builder, physicsOffset);
  DesiredCarState.addBoostAmount(builder, boostAmountOffset);
  DesiredCarState.addJumped(builder, jumpedOffset);
  DesiredCarState.addDoubleJumped(builder, doubleJumpedOffset);
  return DesiredCarState.endDesiredCarState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredBoostState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredBoostState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredBoostState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredBoostState= obj
 * @returns DesiredBoostState
 */
static getRootAsDesiredBoostState(bb:flatbuffers.ByteBuffer, obj?:DesiredBoostState):DesiredBoostState {
  return (obj || new DesiredBoostState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredBoostState= obj
 * @returns DesiredBoostState
 */
static getSizePrefixedRootAsDesiredBoostState(bb:flatbuffers.ByteBuffer, obj?:DesiredBoostState):DesiredBoostState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredBoostState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
respawnTime(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredBoostState(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset respawnTimeOffset
 */
static addRespawnTime(builder:flatbuffers.Builder, respawnTimeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, respawnTimeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredBoostState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredBoostState(builder:flatbuffers.Builder, respawnTimeOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredBoostState.startDesiredBoostState(builder);
  DesiredBoostState.addRespawnTime(builder, respawnTimeOffset);
  return DesiredBoostState.endDesiredBoostState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredGameInfoState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredGameInfoState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredGameInfoState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredGameInfoState= obj
 * @returns DesiredGameInfoState
 */
static getRootAsDesiredGameInfoState(bb:flatbuffers.ByteBuffer, obj?:DesiredGameInfoState):DesiredGameInfoState {
  return (obj || new DesiredGameInfoState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredGameInfoState= obj
 * @returns DesiredGameInfoState
 */
static getSizePrefixedRootAsDesiredGameInfoState(bb:flatbuffers.ByteBuffer, obj?:DesiredGameInfoState):DesiredGameInfoState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredGameInfoState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
worldGravityZ(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Float= obj
 * @returns rlbot.flat.Float|null
 */
gameSpeed(obj?:rlbot.flat.Float):rlbot.flat.Float|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Float()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Bool= obj
 * @returns rlbot.flat.Bool|null
 */
paused(obj?:rlbot.flat.Bool):rlbot.flat.Bool|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Bool()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Bool= obj
 * @returns rlbot.flat.Bool|null
 */
endMatch(obj?:rlbot.flat.Bool):rlbot.flat.Bool|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Bool()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredGameInfoState(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset worldGravityZOffset
 */
static addWorldGravityZ(builder:flatbuffers.Builder, worldGravityZOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, worldGravityZOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset gameSpeedOffset
 */
static addGameSpeed(builder:flatbuffers.Builder, gameSpeedOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, gameSpeedOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pausedOffset
 */
static addPaused(builder:flatbuffers.Builder, pausedOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, pausedOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset endMatchOffset
 */
static addEndMatch(builder:flatbuffers.Builder, endMatchOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, endMatchOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredGameInfoState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredGameInfoState(builder:flatbuffers.Builder, worldGravityZOffset:flatbuffers.Offset, gameSpeedOffset:flatbuffers.Offset, pausedOffset:flatbuffers.Offset, endMatchOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredGameInfoState.startDesiredGameInfoState(builder);
  DesiredGameInfoState.addWorldGravityZ(builder, worldGravityZOffset);
  DesiredGameInfoState.addGameSpeed(builder, gameSpeedOffset);
  DesiredGameInfoState.addPaused(builder, pausedOffset);
  DesiredGameInfoState.addEndMatch(builder, endMatchOffset);
  return DesiredGameInfoState.endDesiredGameInfoState(builder);
}
}
}
/**
 * A console command which we will try to execute inside Rocket League.
 * See https://github.com/RLBot/RLBot/wiki/Console-Commands for a list of known commands.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class ConsoleCommand {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ConsoleCommand
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ConsoleCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ConsoleCommand= obj
 * @returns ConsoleCommand
 */
static getRootAsConsoleCommand(bb:flatbuffers.ByteBuffer, obj?:ConsoleCommand):ConsoleCommand {
  return (obj || new ConsoleCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ConsoleCommand= obj
 * @returns ConsoleCommand
 */
static getSizePrefixedRootAsConsoleCommand(bb:flatbuffers.ByteBuffer, obj?:ConsoleCommand):ConsoleCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConsoleCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
command():string|null
command(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
command(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startConsoleCommand(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset commandOffset
 */
static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commandOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endConsoleCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createConsoleCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConsoleCommand.startConsoleCommand(builder);
  ConsoleCommand.addCommand(builder, commandOffset);
  return ConsoleCommand.endConsoleCommand(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class DesiredGameState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DesiredGameState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DesiredGameState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredGameState= obj
 * @returns DesiredGameState
 */
static getRootAsDesiredGameState(bb:flatbuffers.ByteBuffer, obj?:DesiredGameState):DesiredGameState {
  return (obj || new DesiredGameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DesiredGameState= obj
 * @returns DesiredGameState
 */
static getSizePrefixedRootAsDesiredGameState(bb:flatbuffers.ByteBuffer, obj?:DesiredGameState):DesiredGameState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DesiredGameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.DesiredBallState= obj
 * @returns rlbot.flat.DesiredBallState|null
 */
ballState(obj?:rlbot.flat.DesiredBallState):rlbot.flat.DesiredBallState|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.DesiredBallState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param number index
 * @param rlbot.flat.DesiredCarState= obj
 * @returns rlbot.flat.DesiredCarState
 */
carStates(index: number, obj?:rlbot.flat.DesiredCarState):rlbot.flat.DesiredCarState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.DesiredCarState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
carStatesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param rlbot.flat.DesiredBoostState= obj
 * @returns rlbot.flat.DesiredBoostState
 */
boostStates(index: number, obj?:rlbot.flat.DesiredBoostState):rlbot.flat.DesiredBoostState|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.DesiredBoostState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
boostStatesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.DesiredGameInfoState= obj
 * @returns rlbot.flat.DesiredGameInfoState|null
 */
gameInfoState(obj?:rlbot.flat.DesiredGameInfoState):rlbot.flat.DesiredGameInfoState|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.DesiredGameInfoState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param number index
 * @param rlbot.flat.ConsoleCommand= obj
 * @returns rlbot.flat.ConsoleCommand
 */
consoleCommands(index: number, obj?:rlbot.flat.ConsoleCommand):rlbot.flat.ConsoleCommand|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.ConsoleCommand()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
consoleCommandsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDesiredGameState(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset ballStateOffset
 */
static addBallState(builder:flatbuffers.Builder, ballStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ballStateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset carStatesOffset
 */
static addCarStates(builder:flatbuffers.Builder, carStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, carStatesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCarStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCarStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset boostStatesOffset
 */
static addBoostStates(builder:flatbuffers.Builder, boostStatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, boostStatesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createBoostStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBoostStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset gameInfoStateOffset
 */
static addGameInfoState(builder:flatbuffers.Builder, gameInfoStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, gameInfoStateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset consoleCommandsOffset
 */
static addConsoleCommands(builder:flatbuffers.Builder, consoleCommandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, consoleCommandsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createConsoleCommandsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startConsoleCommandsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDesiredGameState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createDesiredGameState(builder:flatbuffers.Builder, ballStateOffset:flatbuffers.Offset, carStatesOffset:flatbuffers.Offset, boostStatesOffset:flatbuffers.Offset, gameInfoStateOffset:flatbuffers.Offset, consoleCommandsOffset:flatbuffers.Offset):flatbuffers.Offset {
  DesiredGameState.startDesiredGameState(builder);
  DesiredGameState.addBallState(builder, ballStateOffset);
  DesiredGameState.addCarStates(builder, carStatesOffset);
  DesiredGameState.addBoostStates(builder, boostStatesOffset);
  DesiredGameState.addGameInfoState(builder, gameInfoStateOffset);
  DesiredGameState.addConsoleCommands(builder, consoleCommandsOffset);
  return DesiredGameState.endDesiredGameState(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class Color {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Color
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Color {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Color= obj
 * @returns Color
 */
static getRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Color= obj
 * @returns Color
 */
static getSizePrefixedRootAsColor(bb:flatbuffers.ByteBuffer, obj?:Color):Color {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Color()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
a():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
r():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
g():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
b():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startColor(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number a
 */
static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt8(0, a, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number r
 */
static addR(builder:flatbuffers.Builder, r:number) {
  builder.addFieldInt8(1, r, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number g
 */
static addG(builder:flatbuffers.Builder, g:number) {
  builder.addFieldInt8(2, g, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number b
 */
static addB(builder:flatbuffers.Builder, b:number) {
  builder.addFieldInt8(3, b, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endColor(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createColor(builder:flatbuffers.Builder, a:number, r:number, g:number, b:number):flatbuffers.Offset {
  Color.startColor(builder);
  Color.addA(builder, a);
  Color.addR(builder, r);
  Color.addG(builder, g);
  Color.addB(builder, b);
  return Color.endColor(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class RenderMessage {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RenderMessage
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RenderMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RenderMessage= obj
 * @returns RenderMessage
 */
static getRootAsRenderMessage(bb:flatbuffers.ByteBuffer, obj?:RenderMessage):RenderMessage {
  return (obj || new RenderMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RenderMessage= obj
 * @returns RenderMessage
 */
static getSizePrefixedRootAsRenderMessage(bb:flatbuffers.ByteBuffer, obj?:RenderMessage):RenderMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RenderMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns rlbot.flat.RenderType
 */
renderType():rlbot.flat.RenderType {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.RenderType.DrawLine2D;
};

/**
 * @param rlbot.flat.Color= obj
 * @returns rlbot.flat.Color|null
 */
color(obj?:rlbot.flat.Color):rlbot.flat.Color|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
start(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * For 2d renders this only grabs x and y
 *
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
end(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns number
 */
scaleX():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 1;
};

/**
 * Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
 *
 * @returns number
 */
scaleY():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 1;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Rectangles can be filled or just outlines.
 *
 * @returns boolean
 */
isFilled():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startRenderMessage(builder:flatbuffers.Builder) {
  builder.startObject(8);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.RenderType renderType
 */
static addRenderType(builder:flatbuffers.Builder, renderType:rlbot.flat.RenderType) {
  builder.addFieldInt8(0, renderType, rlbot.flat.RenderType.DrawLine2D);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset colorOffset
 */
static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset startOffset
 */
static addStart(builder:flatbuffers.Builder, startOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, startOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset endOffset
 */
static addEnd(builder:flatbuffers.Builder, endOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, endOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleX
 */
static addScaleX(builder:flatbuffers.Builder, scaleX:number) {
  builder.addFieldInt32(4, scaleX, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number scaleY
 */
static addScaleY(builder:flatbuffers.Builder, scaleY:number) {
  builder.addFieldInt32(5, scaleY, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset textOffset
 */
static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, textOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isFilled
 */
static addIsFilled(builder:flatbuffers.Builder, isFilled:boolean) {
  builder.addFieldInt8(7, +isFilled, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRenderMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRenderMessage(builder:flatbuffers.Builder, renderType:rlbot.flat.RenderType, colorOffset:flatbuffers.Offset, startOffset:flatbuffers.Offset, endOffset:flatbuffers.Offset, scaleX:number, scaleY:number, textOffset:flatbuffers.Offset, isFilled:boolean):flatbuffers.Offset {
  RenderMessage.startRenderMessage(builder);
  RenderMessage.addRenderType(builder, renderType);
  RenderMessage.addColor(builder, colorOffset);
  RenderMessage.addStart(builder, startOffset);
  RenderMessage.addEnd(builder, endOffset);
  RenderMessage.addScaleX(builder, scaleX);
  RenderMessage.addScaleY(builder, scaleY);
  RenderMessage.addText(builder, textOffset);
  RenderMessage.addIsFilled(builder, isFilled);
  return RenderMessage.endRenderMessage(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class RenderGroup {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RenderGroup
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RenderGroup {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RenderGroup= obj
 * @returns RenderGroup
 */
static getRootAsRenderGroup(bb:flatbuffers.ByteBuffer, obj?:RenderGroup):RenderGroup {
  return (obj || new RenderGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RenderGroup= obj
 * @returns RenderGroup
 */
static getSizePrefixedRootAsRenderGroup(bb:flatbuffers.ByteBuffer, obj?:RenderGroup):RenderGroup {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RenderGroup()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.RenderMessage= obj
 * @returns rlbot.flat.RenderMessage
 */
renderMessages(index: number, obj?:rlbot.flat.RenderMessage):rlbot.flat.RenderMessage|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.RenderMessage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
renderMessagesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The id of the render group
 *
 * @returns number
 */
id():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startRenderGroup(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset renderMessagesOffset
 */
static addRenderMessages(builder:flatbuffers.Builder, renderMessagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, renderMessagesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createRenderMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startRenderMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number id
 */
static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(1, id, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRenderGroup(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRenderGroup(builder:flatbuffers.Builder, renderMessagesOffset:flatbuffers.Offset, id:number):flatbuffers.Offset {
  RenderGroup.startRenderGroup(builder);
  RenderGroup.addRenderMessages(builder, renderMessagesOffset);
  RenderGroup.addId(builder, id);
  return RenderGroup.endRenderGroup(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class QuickChat {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns QuickChat
 */
__init(i:number, bb:flatbuffers.ByteBuffer):QuickChat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param QuickChat= obj
 * @returns QuickChat
 */
static getRootAsQuickChat(bb:flatbuffers.ByteBuffer, obj?:QuickChat):QuickChat {
  return (obj || new QuickChat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param QuickChat= obj
 * @returns QuickChat
 */
static getSizePrefixedRootAsQuickChat(bb:flatbuffers.ByteBuffer, obj?:QuickChat):QuickChat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuickChat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns rlbot.flat.QuickChatSelection
 */
quickChatSelection():rlbot.flat.QuickChatSelection {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.QuickChatSelection.Information_IGotIt;
};

/**
 * The index of the player that sent the quick chat
 *
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * True if the chat is team only false if everyone can see it.
 *
 * @returns boolean
 */
teamOnly():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns number
 */
messageIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
timeStamp():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startQuickChat(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.QuickChatSelection quickChatSelection
 */
static addQuickChatSelection(builder:flatbuffers.Builder, quickChatSelection:rlbot.flat.QuickChatSelection) {
  builder.addFieldInt8(0, quickChatSelection, rlbot.flat.QuickChatSelection.Information_IGotIt);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(1, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean teamOnly
 */
static addTeamOnly(builder:flatbuffers.Builder, teamOnly:boolean) {
  builder.addFieldInt8(2, +teamOnly, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number messageIndex
 */
static addMessageIndex(builder:flatbuffers.Builder, messageIndex:number) {
  builder.addFieldInt32(3, messageIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number timeStamp
 */
static addTimeStamp(builder:flatbuffers.Builder, timeStamp:number) {
  builder.addFieldFloat32(4, timeStamp, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endQuickChat(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishQuickChatBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedQuickChatBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
};

static createQuickChat(builder:flatbuffers.Builder, quickChatSelection:rlbot.flat.QuickChatSelection, playerIndex:number, teamOnly:boolean, messageIndex:number, timeStamp:number):flatbuffers.Offset {
  QuickChat.startQuickChat(builder);
  QuickChat.addQuickChatSelection(builder, quickChatSelection);
  QuickChat.addPlayerIndex(builder, playerIndex);
  QuickChat.addTeamOnly(builder, teamOnly);
  QuickChat.addMessageIndex(builder, messageIndex);
  QuickChat.addTimeStamp(builder, timeStamp);
  return QuickChat.endQuickChat(builder);
}
}
}
/**
 * A minimal version of player data, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class TinyPlayer {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TinyPlayer
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TinyPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyPlayer= obj
 * @returns TinyPlayer
 */
static getRootAsTinyPlayer(bb:flatbuffers.ByteBuffer, obj?:TinyPlayer):TinyPlayer {
  return (obj || new TinyPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyPlayer= obj
 * @returns TinyPlayer
 */
static getSizePrefixedRootAsTinyPlayer(bb:flatbuffers.ByteBuffer, obj?:TinyPlayer):TinyPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TinyPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Rotator= obj
 * @returns rlbot.flat.Rotator|null
 */
rotation(obj?:rlbot.flat.Rotator):rlbot.flat.Rotator|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Rotator()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
velocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns boolean
 */
hasWheelContact():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
isSupersonic():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns number
 */
team():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
boost():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTinyPlayer(builder:flatbuffers.Builder) {
  builder.startObject(7);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset rotationOffset
 */
static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, rotationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset velocityOffset
 */
static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, velocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasWheelContact
 */
static addHasWheelContact(builder:flatbuffers.Builder, hasWheelContact:boolean) {
  builder.addFieldInt8(3, +hasWheelContact, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isSupersonic
 */
static addIsSupersonic(builder:flatbuffers.Builder, isSupersonic:boolean) {
  builder.addFieldInt8(4, +isSupersonic, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number team
 */
static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(5, team, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boost
 */
static addBoost(builder:flatbuffers.Builder, boost:number) {
  builder.addFieldInt32(6, boost, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTinyPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTinyPlayer(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset, rotationOffset:flatbuffers.Offset, velocityOffset:flatbuffers.Offset, hasWheelContact:boolean, isSupersonic:boolean, team:number, boost:number):flatbuffers.Offset {
  TinyPlayer.startTinyPlayer(builder);
  TinyPlayer.addLocation(builder, locationOffset);
  TinyPlayer.addRotation(builder, rotationOffset);
  TinyPlayer.addVelocity(builder, velocityOffset);
  TinyPlayer.addHasWheelContact(builder, hasWheelContact);
  TinyPlayer.addIsSupersonic(builder, isSupersonic);
  TinyPlayer.addTeam(builder, team);
  TinyPlayer.addBoost(builder, boost);
  return TinyPlayer.endTinyPlayer(builder);
}
}
}
/**
 * A minimal version of the ball, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class TinyBall {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TinyBall
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TinyBall {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyBall= obj
 * @returns TinyBall
 */
static getRootAsTinyBall(bb:flatbuffers.ByteBuffer, obj?:TinyBall):TinyBall {
  return (obj || new TinyBall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyBall= obj
 * @returns TinyBall
 */
static getSizePrefixedRootAsTinyBall(bb:flatbuffers.ByteBuffer, obj?:TinyBall):TinyBall {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TinyBall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
location(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param rlbot.flat.Vector3= obj
 * @returns rlbot.flat.Vector3|null
 */
velocity(obj?:rlbot.flat.Vector3):rlbot.flat.Vector3|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTinyBall(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset locationOffset
 */
static addLocation(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, locationOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset velocityOffset
 */
static addVelocity(builder:flatbuffers.Builder, velocityOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, velocityOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTinyBall(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTinyBall(builder:flatbuffers.Builder, locationOffset:flatbuffers.Offset, velocityOffset:flatbuffers.Offset):flatbuffers.Offset {
  TinyBall.startTinyBall(builder);
  TinyBall.addLocation(builder, locationOffset);
  TinyBall.addVelocity(builder, velocityOffset);
  return TinyBall.endTinyBall(builder);
}
}
}
/**
 * A minimal version of the game tick packet, useful when bandwidth needs to be conserved.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class TinyPacket {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TinyPacket
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TinyPacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyPacket= obj
 * @returns TinyPacket
 */
static getRootAsTinyPacket(bb:flatbuffers.ByteBuffer, obj?:TinyPacket):TinyPacket {
  return (obj || new TinyPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TinyPacket= obj
 * @returns TinyPacket
 */
static getSizePrefixedRootAsTinyPacket(bb:flatbuffers.ByteBuffer, obj?:TinyPacket):TinyPacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TinyPacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.TinyPlayer= obj
 * @returns rlbot.flat.TinyPlayer
 */
players(index: number, obj?:rlbot.flat.TinyPlayer):rlbot.flat.TinyPlayer|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.TinyPlayer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
playersLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.TinyBall= obj
 * @returns rlbot.flat.TinyBall|null
 */
ball(obj?:rlbot.flat.TinyBall):rlbot.flat.TinyBall|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.TinyBall()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTinyPacket(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playersOffset
 */
static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playersOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset ballOffset
 */
static addBall(builder:flatbuffers.Builder, ballOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ballOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTinyPacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTinyPacket(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset, ballOffset:flatbuffers.Offset):flatbuffers.Offset {
  TinyPacket.startTinyPacket(builder);
  TinyPacket.addPlayers(builder, playersOffset);
  TinyPacket.addBall(builder, ballOffset);
  return TinyPacket.endTinyPacket(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class PredictionSlice {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PredictionSlice
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PredictionSlice {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PredictionSlice= obj
 * @returns PredictionSlice
 */
static getRootAsPredictionSlice(bb:flatbuffers.ByteBuffer, obj?:PredictionSlice):PredictionSlice {
  return (obj || new PredictionSlice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PredictionSlice= obj
 * @returns PredictionSlice
 */
static getSizePrefixedRootAsPredictionSlice(bb:flatbuffers.ByteBuffer, obj?:PredictionSlice):PredictionSlice {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PredictionSlice()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The moment in game time that this prediction corresponds to.
 * This corresponds to 'secondsElapsed' in the GameInfo table.
 *
 * @returns number
 */
gameSeconds():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * The predicted location and motion of the object.
 *
 * @param rlbot.flat.Physics= obj
 * @returns rlbot.flat.Physics|null
 */
physics(obj?:rlbot.flat.Physics):rlbot.flat.Physics|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.Physics()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPredictionSlice(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gameSeconds
 */
static addGameSeconds(builder:flatbuffers.Builder, gameSeconds:number) {
  builder.addFieldFloat32(0, gameSeconds, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset physicsOffset
 */
static addPhysics(builder:flatbuffers.Builder, physicsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, physicsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPredictionSlice(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPredictionSlice(builder:flatbuffers.Builder, gameSeconds:number, physicsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PredictionSlice.startPredictionSlice(builder);
  PredictionSlice.addGameSeconds(builder, gameSeconds);
  PredictionSlice.addPhysics(builder, physicsOffset);
  return PredictionSlice.endPredictionSlice(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class BallPrediction {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BallPrediction
 */
__init(i:number, bb:flatbuffers.ByteBuffer):BallPrediction {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallPrediction= obj
 * @returns BallPrediction
 */
static getRootAsBallPrediction(bb:flatbuffers.ByteBuffer, obj?:BallPrediction):BallPrediction {
  return (obj || new BallPrediction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BallPrediction= obj
 * @returns BallPrediction
 */
static getSizePrefixedRootAsBallPrediction(bb:flatbuffers.ByteBuffer, obj?:BallPrediction):BallPrediction {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BallPrediction()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * A list of places the ball will be at specific times in the future.
 * It is guaranteed to sorted so that time increases with each slice.
 * It is NOT guaranteed to have a consistent amount of time between slices.
 *
 * @param number index
 * @param rlbot.flat.PredictionSlice= obj
 * @returns rlbot.flat.PredictionSlice
 */
slices(index: number, obj?:rlbot.flat.PredictionSlice):rlbot.flat.PredictionSlice|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PredictionSlice()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
slicesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBallPrediction(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset slicesOffset
 */
static addSlices(builder:flatbuffers.Builder, slicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, slicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createSlicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startSlicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBallPrediction(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createBallPrediction(builder:flatbuffers.Builder, slicesOffset:flatbuffers.Offset):flatbuffers.Offset {
  BallPrediction.startBallPrediction(builder);
  BallPrediction.addSlices(builder, slicesOffset);
  return BallPrediction.endBallPrediction(builder);
}
}
}
/**
 * A bot controlled by the RLBot framework
 *
 * @constructor
 */
export namespace rlbot.flat{
export class RLBotPlayer {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns RLBotPlayer
 */
__init(i:number, bb:flatbuffers.ByteBuffer):RLBotPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RLBotPlayer= obj
 * @returns RLBotPlayer
 */
static getRootAsRLBotPlayer(bb:flatbuffers.ByteBuffer, obj?:RLBotPlayer):RLBotPlayer {
  return (obj || new RLBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param RLBotPlayer= obj
 * @returns RLBotPlayer
 */
static getSizePrefixedRootAsRLBotPlayer(bb:flatbuffers.ByteBuffer, obj?:RLBotPlayer):RLBotPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RLBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Builder builder
 */
static startRLBotPlayer(builder:flatbuffers.Builder) {
  builder.startObject(0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endRLBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createRLBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  RLBotPlayer.startRLBotPlayer(builder);
  return RLBotPlayer.endRLBotPlayer(builder);
}
}
}
/**
 * A normal human player
 *
 * @constructor
 */
export namespace rlbot.flat{
export class HumanPlayer {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns HumanPlayer
 */
__init(i:number, bb:flatbuffers.ByteBuffer):HumanPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param HumanPlayer= obj
 * @returns HumanPlayer
 */
static getRootAsHumanPlayer(bb:flatbuffers.ByteBuffer, obj?:HumanPlayer):HumanPlayer {
  return (obj || new HumanPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param HumanPlayer= obj
 * @returns HumanPlayer
 */
static getSizePrefixedRootAsHumanPlayer(bb:flatbuffers.ByteBuffer, obj?:HumanPlayer):HumanPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HumanPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Builder builder
 */
static startHumanPlayer(builder:flatbuffers.Builder) {
  builder.startObject(0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endHumanPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createHumanPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  HumanPlayer.startHumanPlayer(builder);
  return HumanPlayer.endHumanPlayer(builder);
}
}
}
/**
 * A psyonix bot, e.g. All Star bot
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PsyonixBotPlayer {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PsyonixBotPlayer
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PsyonixBotPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PsyonixBotPlayer= obj
 * @returns PsyonixBotPlayer
 */
static getRootAsPsyonixBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PsyonixBotPlayer):PsyonixBotPlayer {
  return (obj || new PsyonixBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PsyonixBotPlayer= obj
 * @returns PsyonixBotPlayer
 */
static getSizePrefixedRootAsPsyonixBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PsyonixBotPlayer):PsyonixBotPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PsyonixBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
botSkill():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPsyonixBotPlayer(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number botSkill
 */
static addBotSkill(builder:flatbuffers.Builder, botSkill:number) {
  builder.addFieldFloat32(0, botSkill, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPsyonixBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPsyonixBotPlayer(builder:flatbuffers.Builder, botSkill:number):flatbuffers.Offset {
  PsyonixBotPlayer.startPsyonixBotPlayer(builder);
  PsyonixBotPlayer.addBotSkill(builder, botSkill);
  return PsyonixBotPlayer.endPsyonixBotPlayer(builder);
}
}
}
/**
 * A player that Rocket League treats as human, e.g. has a dedicated camera and can do training mode,
 * but is actually controlled by a bot.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PartyMemberBotPlayer {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PartyMemberBotPlayer
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PartyMemberBotPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartyMemberBotPlayer= obj
 * @returns PartyMemberBotPlayer
 */
static getRootAsPartyMemberBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PartyMemberBotPlayer):PartyMemberBotPlayer {
  return (obj || new PartyMemberBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartyMemberBotPlayer= obj
 * @returns PartyMemberBotPlayer
 */
static getSizePrefixedRootAsPartyMemberBotPlayer(bb:flatbuffers.ByteBuffer, obj?:PartyMemberBotPlayer):PartyMemberBotPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartyMemberBotPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Builder builder
 */
static startPartyMemberBotPlayer(builder:flatbuffers.Builder) {
  builder.startObject(0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPartyMemberBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPartyMemberBotPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  PartyMemberBotPlayer.startPartyMemberBotPlayer(builder);
  return PartyMemberBotPlayer.endPartyMemberBotPlayer(builder);
}
}
}
/**
 * The car type, color, and other aspects of the player's appearance.
 * See https://github.com/RLBot/RLBot/wiki/Bot-Customization
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerLoadout {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerLoadout
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerLoadout {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerLoadout= obj
 * @returns PlayerLoadout
 */
static getRootAsPlayerLoadout(bb:flatbuffers.ByteBuffer, obj?:PlayerLoadout):PlayerLoadout {
  return (obj || new PlayerLoadout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerLoadout= obj
 * @returns PlayerLoadout
 */
static getSizePrefixedRootAsPlayerLoadout(bb:flatbuffers.ByteBuffer, obj?:PlayerLoadout):PlayerLoadout {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerLoadout()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
teamColorId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
customColorId():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
carId():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
decalId():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
wheelsId():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
boostId():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
antennaId():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
hatId():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
paintFinishId():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
customFinishId():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
engineAudioId():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
trailsId():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
goalExplosionId():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.LoadoutPaint= obj
 * @returns rlbot.flat.LoadoutPaint|null
 */
loadoutPaint(obj?:rlbot.flat.LoadoutPaint):rlbot.flat.LoadoutPaint|null {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new rlbot.flat.LoadoutPaint()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * Sets the primary color of the car to the swatch that most closely matches the provided
 * RGB color value. If set, this overrides teamColorId.
 *
 * @param rlbot.flat.Color= obj
 * @returns rlbot.flat.Color|null
 */
primaryColorLookup(obj?:rlbot.flat.Color):rlbot.flat.Color|null {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new rlbot.flat.Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * Sets the secondary color of the car to the swatch that most closely matches the provided
 * RGB color value. If set, this overrides customColorId.
 *
 * @param rlbot.flat.Color= obj
 * @returns rlbot.flat.Color|null
 */
secondaryColorLookup(obj?:rlbot.flat.Color):rlbot.flat.Color|null {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new rlbot.flat.Color()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerLoadout(builder:flatbuffers.Builder) {
  builder.startObject(16);
};

/**
 * @param flatbuffers.Builder builder
 * @param number teamColorId
 */
static addTeamColorId(builder:flatbuffers.Builder, teamColorId:number) {
  builder.addFieldInt32(0, teamColorId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number customColorId
 */
static addCustomColorId(builder:flatbuffers.Builder, customColorId:number) {
  builder.addFieldInt32(1, customColorId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number carId
 */
static addCarId(builder:flatbuffers.Builder, carId:number) {
  builder.addFieldInt32(2, carId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number decalId
 */
static addDecalId(builder:flatbuffers.Builder, decalId:number) {
  builder.addFieldInt32(3, decalId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number wheelsId
 */
static addWheelsId(builder:flatbuffers.Builder, wheelsId:number) {
  builder.addFieldInt32(4, wheelsId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boostId
 */
static addBoostId(builder:flatbuffers.Builder, boostId:number) {
  builder.addFieldInt32(5, boostId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number antennaId
 */
static addAntennaId(builder:flatbuffers.Builder, antennaId:number) {
  builder.addFieldInt32(6, antennaId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number hatId
 */
static addHatId(builder:flatbuffers.Builder, hatId:number) {
  builder.addFieldInt32(7, hatId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number paintFinishId
 */
static addPaintFinishId(builder:flatbuffers.Builder, paintFinishId:number) {
  builder.addFieldInt32(8, paintFinishId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number customFinishId
 */
static addCustomFinishId(builder:flatbuffers.Builder, customFinishId:number) {
  builder.addFieldInt32(9, customFinishId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number engineAudioId
 */
static addEngineAudioId(builder:flatbuffers.Builder, engineAudioId:number) {
  builder.addFieldInt32(10, engineAudioId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number trailsId
 */
static addTrailsId(builder:flatbuffers.Builder, trailsId:number) {
  builder.addFieldInt32(11, trailsId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number goalExplosionId
 */
static addGoalExplosionId(builder:flatbuffers.Builder, goalExplosionId:number) {
  builder.addFieldInt32(12, goalExplosionId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset loadoutPaintOffset
 */
static addLoadoutPaint(builder:flatbuffers.Builder, loadoutPaintOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, loadoutPaintOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset primaryColorLookupOffset
 */
static addPrimaryColorLookup(builder:flatbuffers.Builder, primaryColorLookupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, primaryColorLookupOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset secondaryColorLookupOffset
 */
static addSecondaryColorLookup(builder:flatbuffers.Builder, secondaryColorLookupOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, secondaryColorLookupOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerLoadout(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerLoadout(builder:flatbuffers.Builder, teamColorId:number, customColorId:number, carId:number, decalId:number, wheelsId:number, boostId:number, antennaId:number, hatId:number, paintFinishId:number, customFinishId:number, engineAudioId:number, trailsId:number, goalExplosionId:number, loadoutPaintOffset:flatbuffers.Offset, primaryColorLookupOffset:flatbuffers.Offset, secondaryColorLookupOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerLoadout.startPlayerLoadout(builder);
  PlayerLoadout.addTeamColorId(builder, teamColorId);
  PlayerLoadout.addCustomColorId(builder, customColorId);
  PlayerLoadout.addCarId(builder, carId);
  PlayerLoadout.addDecalId(builder, decalId);
  PlayerLoadout.addWheelsId(builder, wheelsId);
  PlayerLoadout.addBoostId(builder, boostId);
  PlayerLoadout.addAntennaId(builder, antennaId);
  PlayerLoadout.addHatId(builder, hatId);
  PlayerLoadout.addPaintFinishId(builder, paintFinishId);
  PlayerLoadout.addCustomFinishId(builder, customFinishId);
  PlayerLoadout.addEngineAudioId(builder, engineAudioId);
  PlayerLoadout.addTrailsId(builder, trailsId);
  PlayerLoadout.addGoalExplosionId(builder, goalExplosionId);
  PlayerLoadout.addLoadoutPaint(builder, loadoutPaintOffset);
  PlayerLoadout.addPrimaryColorLookup(builder, primaryColorLookupOffset);
  PlayerLoadout.addSecondaryColorLookup(builder, secondaryColorLookupOffset);
  return PlayerLoadout.endPlayerLoadout(builder);
}
}
}
/**
 * Specification for 'painted' items. See https://github.com/RLBot/RLBot/wiki/Bot-Customization
 *
 * @constructor
 */
export namespace rlbot.flat{
export class LoadoutPaint {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LoadoutPaint
 */
__init(i:number, bb:flatbuffers.ByteBuffer):LoadoutPaint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LoadoutPaint= obj
 * @returns LoadoutPaint
 */
static getRootAsLoadoutPaint(bb:flatbuffers.ByteBuffer, obj?:LoadoutPaint):LoadoutPaint {
  return (obj || new LoadoutPaint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LoadoutPaint= obj
 * @returns LoadoutPaint
 */
static getSizePrefixedRootAsLoadoutPaint(bb:flatbuffers.ByteBuffer, obj?:LoadoutPaint):LoadoutPaint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoadoutPaint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
carPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
decalPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
wheelsPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
boostPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
antennaPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
hatPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
trailsPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
goalExplosionPaintId():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLoadoutPaint(builder:flatbuffers.Builder) {
  builder.startObject(8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number carPaintId
 */
static addCarPaintId(builder:flatbuffers.Builder, carPaintId:number) {
  builder.addFieldInt32(0, carPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number decalPaintId
 */
static addDecalPaintId(builder:flatbuffers.Builder, decalPaintId:number) {
  builder.addFieldInt32(1, decalPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number wheelsPaintId
 */
static addWheelsPaintId(builder:flatbuffers.Builder, wheelsPaintId:number) {
  builder.addFieldInt32(2, wheelsPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number boostPaintId
 */
static addBoostPaintId(builder:flatbuffers.Builder, boostPaintId:number) {
  builder.addFieldInt32(3, boostPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number antennaPaintId
 */
static addAntennaPaintId(builder:flatbuffers.Builder, antennaPaintId:number) {
  builder.addFieldInt32(4, antennaPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number hatPaintId
 */
static addHatPaintId(builder:flatbuffers.Builder, hatPaintId:number) {
  builder.addFieldInt32(5, hatPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number trailsPaintId
 */
static addTrailsPaintId(builder:flatbuffers.Builder, trailsPaintId:number) {
  builder.addFieldInt32(6, trailsPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number goalExplosionPaintId
 */
static addGoalExplosionPaintId(builder:flatbuffers.Builder, goalExplosionPaintId:number) {
  builder.addFieldInt32(7, goalExplosionPaintId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLoadoutPaint(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createLoadoutPaint(builder:flatbuffers.Builder, carPaintId:number, decalPaintId:number, wheelsPaintId:number, boostPaintId:number, antennaPaintId:number, hatPaintId:number, trailsPaintId:number, goalExplosionPaintId:number):flatbuffers.Offset {
  LoadoutPaint.startLoadoutPaint(builder);
  LoadoutPaint.addCarPaintId(builder, carPaintId);
  LoadoutPaint.addDecalPaintId(builder, decalPaintId);
  LoadoutPaint.addWheelsPaintId(builder, wheelsPaintId);
  LoadoutPaint.addBoostPaintId(builder, boostPaintId);
  LoadoutPaint.addAntennaPaintId(builder, antennaPaintId);
  LoadoutPaint.addHatPaintId(builder, hatPaintId);
  LoadoutPaint.addTrailsPaintId(builder, trailsPaintId);
  LoadoutPaint.addGoalExplosionPaintId(builder, goalExplosionPaintId);
  return LoadoutPaint.endLoadoutPaint(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerConfiguration {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerConfiguration
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerConfiguration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerConfiguration= obj
 * @returns PlayerConfiguration
 */
static getRootAsPlayerConfiguration(bb:flatbuffers.ByteBuffer, obj?:PlayerConfiguration):PlayerConfiguration {
  return (obj || new PlayerConfiguration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerConfiguration= obj
 * @returns PlayerConfiguration
 */
static getSizePrefixedRootAsPlayerConfiguration(bb:flatbuffers.ByteBuffer, obj?:PlayerConfiguration):PlayerConfiguration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerConfiguration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns rlbot.flat.PlayerClass
 */
varietyType():rlbot.flat.PlayerClass {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : rlbot.flat.PlayerClass.NONE;
};

/**
 * @param flatbuffers.Table obj
 * @returns ?flatbuffers.Table
 */
variety<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
team():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.PlayerLoadout= obj
 * @returns rlbot.flat.PlayerLoadout|null
 */
loadout(obj?:rlbot.flat.PlayerLoadout):rlbot.flat.PlayerLoadout|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new rlbot.flat.PlayerLoadout()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * In the case where the requested player index is not available, spawnId will help
 * the framework figure out what index was actually assigned to this player instead.
 *
 * @returns number
 */
spawnId():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerConfiguration(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.PlayerClass varietyType
 */
static addVarietyType(builder:flatbuffers.Builder, varietyType:rlbot.flat.PlayerClass) {
  builder.addFieldInt8(0, varietyType, rlbot.flat.PlayerClass.NONE);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset varietyOffset
 */
static addVariety(builder:flatbuffers.Builder, varietyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, varietyOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number team
 */
static addTeam(builder:flatbuffers.Builder, team:number) {
  builder.addFieldInt32(3, team, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset loadoutOffset
 */
static addLoadout(builder:flatbuffers.Builder, loadoutOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, loadoutOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number spawnId
 */
static addSpawnId(builder:flatbuffers.Builder, spawnId:number) {
  builder.addFieldInt32(5, spawnId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerConfiguration(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerConfiguration(builder:flatbuffers.Builder, varietyType:rlbot.flat.PlayerClass, varietyOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, team:number, loadoutOffset:flatbuffers.Offset, spawnId:number):flatbuffers.Offset {
  PlayerConfiguration.startPlayerConfiguration(builder);
  PlayerConfiguration.addVarietyType(builder, varietyType);
  PlayerConfiguration.addVariety(builder, varietyOffset);
  PlayerConfiguration.addName(builder, nameOffset);
  PlayerConfiguration.addTeam(builder, team);
  PlayerConfiguration.addLoadout(builder, loadoutOffset);
  PlayerConfiguration.addSpawnId(builder, spawnId);
  return PlayerConfiguration.endPlayerConfiguration(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class MutatorSettings {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MutatorSettings
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MutatorSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MutatorSettings= obj
 * @returns MutatorSettings
 */
static getRootAsMutatorSettings(bb:flatbuffers.ByteBuffer, obj?:MutatorSettings):MutatorSettings {
  return (obj || new MutatorSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MutatorSettings= obj
 * @returns MutatorSettings
 */
static getSizePrefixedRootAsMutatorSettings(bb:flatbuffers.ByteBuffer, obj?:MutatorSettings):MutatorSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MutatorSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns rlbot.flat.MatchLength
 */
matchLength():rlbot.flat.MatchLength {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.MatchLength.Five_Minutes;
};

/**
 * @returns rlbot.flat.MaxScore
 */
maxScore():rlbot.flat.MaxScore {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.MaxScore.Unlimited;
};

/**
 * @returns rlbot.flat.OvertimeOption
 */
overtimeOption():rlbot.flat.OvertimeOption {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.OvertimeOption.Unlimited;
};

/**
 * @returns rlbot.flat.SeriesLengthOption
 */
seriesLengthOption():rlbot.flat.SeriesLengthOption {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.SeriesLengthOption.Unlimited;
};

/**
 * @returns rlbot.flat.GameSpeedOption
 */
gameSpeedOption():rlbot.flat.GameSpeedOption {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.GameSpeedOption.Default;
};

/**
 * @returns rlbot.flat.BallMaxSpeedOption
 */
ballMaxSpeedOption():rlbot.flat.BallMaxSpeedOption {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BallMaxSpeedOption.Default;
};

/**
 * @returns rlbot.flat.BallTypeOption
 */
ballTypeOption():rlbot.flat.BallTypeOption {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BallTypeOption.Default;
};

/**
 * @returns rlbot.flat.BallWeightOption
 */
ballWeightOption():rlbot.flat.BallWeightOption {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BallWeightOption.Default;
};

/**
 * @returns rlbot.flat.BallSizeOption
 */
ballSizeOption():rlbot.flat.BallSizeOption {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BallSizeOption.Default;
};

/**
 * @returns rlbot.flat.BallBouncinessOption
 */
ballBouncinessOption():rlbot.flat.BallBouncinessOption {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BallBouncinessOption.Default;
};

/**
 * @returns rlbot.flat.BoostOption
 */
boostOption():rlbot.flat.BoostOption {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BoostOption.Normal_Boost;
};

/**
 * @returns rlbot.flat.RumbleOption
 */
rumbleOption():rlbot.flat.RumbleOption {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.RumbleOption.No_Rumble;
};

/**
 * @returns rlbot.flat.BoostStrengthOption
 */
boostStrengthOption():rlbot.flat.BoostStrengthOption {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.BoostStrengthOption.One;
};

/**
 * @returns rlbot.flat.GravityOption
 */
gravityOption():rlbot.flat.GravityOption {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.GravityOption.Default;
};

/**
 * @returns rlbot.flat.DemolishOption
 */
demolishOption():rlbot.flat.DemolishOption {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.DemolishOption.Default;
};

/**
 * @returns rlbot.flat.RespawnTimeOption
 */
respawnTimeOption():rlbot.flat.RespawnTimeOption {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.RespawnTimeOption.Three_Seconds;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMutatorSettings(builder:flatbuffers.Builder) {
  builder.startObject(16);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.MatchLength matchLength
 */
static addMatchLength(builder:flatbuffers.Builder, matchLength:rlbot.flat.MatchLength) {
  builder.addFieldInt8(0, matchLength, rlbot.flat.MatchLength.Five_Minutes);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.MaxScore maxScore
 */
static addMaxScore(builder:flatbuffers.Builder, maxScore:rlbot.flat.MaxScore) {
  builder.addFieldInt8(1, maxScore, rlbot.flat.MaxScore.Unlimited);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.OvertimeOption overtimeOption
 */
static addOvertimeOption(builder:flatbuffers.Builder, overtimeOption:rlbot.flat.OvertimeOption) {
  builder.addFieldInt8(2, overtimeOption, rlbot.flat.OvertimeOption.Unlimited);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.SeriesLengthOption seriesLengthOption
 */
static addSeriesLengthOption(builder:flatbuffers.Builder, seriesLengthOption:rlbot.flat.SeriesLengthOption) {
  builder.addFieldInt8(3, seriesLengthOption, rlbot.flat.SeriesLengthOption.Unlimited);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.GameSpeedOption gameSpeedOption
 */
static addGameSpeedOption(builder:flatbuffers.Builder, gameSpeedOption:rlbot.flat.GameSpeedOption) {
  builder.addFieldInt8(4, gameSpeedOption, rlbot.flat.GameSpeedOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BallMaxSpeedOption ballMaxSpeedOption
 */
static addBallMaxSpeedOption(builder:flatbuffers.Builder, ballMaxSpeedOption:rlbot.flat.BallMaxSpeedOption) {
  builder.addFieldInt8(5, ballMaxSpeedOption, rlbot.flat.BallMaxSpeedOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BallTypeOption ballTypeOption
 */
static addBallTypeOption(builder:flatbuffers.Builder, ballTypeOption:rlbot.flat.BallTypeOption) {
  builder.addFieldInt8(6, ballTypeOption, rlbot.flat.BallTypeOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BallWeightOption ballWeightOption
 */
static addBallWeightOption(builder:flatbuffers.Builder, ballWeightOption:rlbot.flat.BallWeightOption) {
  builder.addFieldInt8(7, ballWeightOption, rlbot.flat.BallWeightOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BallSizeOption ballSizeOption
 */
static addBallSizeOption(builder:flatbuffers.Builder, ballSizeOption:rlbot.flat.BallSizeOption) {
  builder.addFieldInt8(8, ballSizeOption, rlbot.flat.BallSizeOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BallBouncinessOption ballBouncinessOption
 */
static addBallBouncinessOption(builder:flatbuffers.Builder, ballBouncinessOption:rlbot.flat.BallBouncinessOption) {
  builder.addFieldInt8(9, ballBouncinessOption, rlbot.flat.BallBouncinessOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BoostOption boostOption
 */
static addBoostOption(builder:flatbuffers.Builder, boostOption:rlbot.flat.BoostOption) {
  builder.addFieldInt8(10, boostOption, rlbot.flat.BoostOption.Normal_Boost);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.RumbleOption rumbleOption
 */
static addRumbleOption(builder:flatbuffers.Builder, rumbleOption:rlbot.flat.RumbleOption) {
  builder.addFieldInt8(11, rumbleOption, rlbot.flat.RumbleOption.No_Rumble);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.BoostStrengthOption boostStrengthOption
 */
static addBoostStrengthOption(builder:flatbuffers.Builder, boostStrengthOption:rlbot.flat.BoostStrengthOption) {
  builder.addFieldInt8(12, boostStrengthOption, rlbot.flat.BoostStrengthOption.One);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.GravityOption gravityOption
 */
static addGravityOption(builder:flatbuffers.Builder, gravityOption:rlbot.flat.GravityOption) {
  builder.addFieldInt8(13, gravityOption, rlbot.flat.GravityOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.DemolishOption demolishOption
 */
static addDemolishOption(builder:flatbuffers.Builder, demolishOption:rlbot.flat.DemolishOption) {
  builder.addFieldInt8(14, demolishOption, rlbot.flat.DemolishOption.Default);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.RespawnTimeOption respawnTimeOption
 */
static addRespawnTimeOption(builder:flatbuffers.Builder, respawnTimeOption:rlbot.flat.RespawnTimeOption) {
  builder.addFieldInt8(15, respawnTimeOption, rlbot.flat.RespawnTimeOption.Three_Seconds);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMutatorSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createMutatorSettings(builder:flatbuffers.Builder, matchLength:rlbot.flat.MatchLength, maxScore:rlbot.flat.MaxScore, overtimeOption:rlbot.flat.OvertimeOption, seriesLengthOption:rlbot.flat.SeriesLengthOption, gameSpeedOption:rlbot.flat.GameSpeedOption, ballMaxSpeedOption:rlbot.flat.BallMaxSpeedOption, ballTypeOption:rlbot.flat.BallTypeOption, ballWeightOption:rlbot.flat.BallWeightOption, ballSizeOption:rlbot.flat.BallSizeOption, ballBouncinessOption:rlbot.flat.BallBouncinessOption, boostOption:rlbot.flat.BoostOption, rumbleOption:rlbot.flat.RumbleOption, boostStrengthOption:rlbot.flat.BoostStrengthOption, gravityOption:rlbot.flat.GravityOption, demolishOption:rlbot.flat.DemolishOption, respawnTimeOption:rlbot.flat.RespawnTimeOption):flatbuffers.Offset {
  MutatorSettings.startMutatorSettings(builder);
  MutatorSettings.addMatchLength(builder, matchLength);
  MutatorSettings.addMaxScore(builder, maxScore);
  MutatorSettings.addOvertimeOption(builder, overtimeOption);
  MutatorSettings.addSeriesLengthOption(builder, seriesLengthOption);
  MutatorSettings.addGameSpeedOption(builder, gameSpeedOption);
  MutatorSettings.addBallMaxSpeedOption(builder, ballMaxSpeedOption);
  MutatorSettings.addBallTypeOption(builder, ballTypeOption);
  MutatorSettings.addBallWeightOption(builder, ballWeightOption);
  MutatorSettings.addBallSizeOption(builder, ballSizeOption);
  MutatorSettings.addBallBouncinessOption(builder, ballBouncinessOption);
  MutatorSettings.addBoostOption(builder, boostOption);
  MutatorSettings.addRumbleOption(builder, rumbleOption);
  MutatorSettings.addBoostStrengthOption(builder, boostStrengthOption);
  MutatorSettings.addGravityOption(builder, gravityOption);
  MutatorSettings.addDemolishOption(builder, demolishOption);
  MutatorSettings.addRespawnTimeOption(builder, respawnTimeOption);
  return MutatorSettings.endMutatorSettings(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class MatchSettings {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MatchSettings
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MatchSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MatchSettings= obj
 * @returns MatchSettings
 */
static getRootAsMatchSettings(bb:flatbuffers.ByteBuffer, obj?:MatchSettings):MatchSettings {
  return (obj || new MatchSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MatchSettings= obj
 * @returns MatchSettings
 */
static getSizePrefixedRootAsMatchSettings(bb:flatbuffers.ByteBuffer, obj?:MatchSettings):MatchSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MatchSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.PlayerConfiguration= obj
 * @returns rlbot.flat.PlayerConfiguration
 */
playerConfigurations(index: number, obj?:rlbot.flat.PlayerConfiguration):rlbot.flat.PlayerConfiguration|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.PlayerConfiguration()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
playerConfigurationsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns rlbot.flat.GameMode
 */
gameMode():rlbot.flat.GameMode {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.GameMode.Soccer;
};

/**
 * @returns rlbot.flat.GameMap
 */
gameMap():rlbot.flat.GameMap {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.GameMap.DFHStadium;
};

/**
 * @returns boolean
 */
skipReplays():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
instantStart():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param rlbot.flat.MutatorSettings= obj
 * @returns rlbot.flat.MutatorSettings|null
 */
mutatorSettings(obj?:rlbot.flat.MutatorSettings):rlbot.flat.MutatorSettings|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new rlbot.flat.MutatorSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns rlbot.flat.ExistingMatchBehavior
 */
existingMatchBehavior():rlbot.flat.ExistingMatchBehavior {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : rlbot.flat.ExistingMatchBehavior.Restart_If_Different;
};

/**
 * @returns boolean
 */
enableLockstep():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
enableRendering():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
enableStateSetting():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
autoSaveReplay():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMatchSettings(builder:flatbuffers.Builder) {
  builder.startObject(11);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playerConfigurationsOffset
 */
static addPlayerConfigurations(builder:flatbuffers.Builder, playerConfigurationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerConfigurationsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createPlayerConfigurationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPlayerConfigurationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.GameMode gameMode
 */
static addGameMode(builder:flatbuffers.Builder, gameMode:rlbot.flat.GameMode) {
  builder.addFieldInt8(1, gameMode, rlbot.flat.GameMode.Soccer);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.GameMap gameMap
 */
static addGameMap(builder:flatbuffers.Builder, gameMap:rlbot.flat.GameMap) {
  builder.addFieldInt8(2, gameMap, rlbot.flat.GameMap.DFHStadium);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean skipReplays
 */
static addSkipReplays(builder:flatbuffers.Builder, skipReplays:boolean) {
  builder.addFieldInt8(3, +skipReplays, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean instantStart
 */
static addInstantStart(builder:flatbuffers.Builder, instantStart:boolean) {
  builder.addFieldInt8(4, +instantStart, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset mutatorSettingsOffset
 */
static addMutatorSettings(builder:flatbuffers.Builder, mutatorSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, mutatorSettingsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.ExistingMatchBehavior existingMatchBehavior
 */
static addExistingMatchBehavior(builder:flatbuffers.Builder, existingMatchBehavior:rlbot.flat.ExistingMatchBehavior) {
  builder.addFieldInt8(6, existingMatchBehavior, rlbot.flat.ExistingMatchBehavior.Restart_If_Different);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean enableLockstep
 */
static addEnableLockstep(builder:flatbuffers.Builder, enableLockstep:boolean) {
  builder.addFieldInt8(7, +enableLockstep, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean enableRendering
 */
static addEnableRendering(builder:flatbuffers.Builder, enableRendering:boolean) {
  builder.addFieldInt8(8, +enableRendering, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean enableStateSetting
 */
static addEnableStateSetting(builder:flatbuffers.Builder, enableStateSetting:boolean) {
  builder.addFieldInt8(9, +enableStateSetting, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean autoSaveReplay
 */
static addAutoSaveReplay(builder:flatbuffers.Builder, autoSaveReplay:boolean) {
  builder.addFieldInt8(10, +autoSaveReplay, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMatchSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createMatchSettings(builder:flatbuffers.Builder, playerConfigurationsOffset:flatbuffers.Offset, gameMode:rlbot.flat.GameMode, gameMap:rlbot.flat.GameMap, skipReplays:boolean, instantStart:boolean, mutatorSettingsOffset:flatbuffers.Offset, existingMatchBehavior:rlbot.flat.ExistingMatchBehavior, enableLockstep:boolean, enableRendering:boolean, enableStateSetting:boolean, autoSaveReplay:boolean):flatbuffers.Offset {
  MatchSettings.startMatchSettings(builder);
  MatchSettings.addPlayerConfigurations(builder, playerConfigurationsOffset);
  MatchSettings.addGameMode(builder, gameMode);
  MatchSettings.addGameMap(builder, gameMap);
  MatchSettings.addSkipReplays(builder, skipReplays);
  MatchSettings.addInstantStart(builder, instantStart);
  MatchSettings.addMutatorSettings(builder, mutatorSettingsOffset);
  MatchSettings.addExistingMatchBehavior(builder, existingMatchBehavior);
  MatchSettings.addEnableLockstep(builder, enableLockstep);
  MatchSettings.addEnableRendering(builder, enableRendering);
  MatchSettings.addEnableStateSetting(builder, enableStateSetting);
  MatchSettings.addAutoSaveReplay(builder, autoSaveReplay);
  return MatchSettings.endMatchSettings(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class QuickChatMessages {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns QuickChatMessages
 */
__init(i:number, bb:flatbuffers.ByteBuffer):QuickChatMessages {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param QuickChatMessages= obj
 * @returns QuickChatMessages
 */
static getRootAsQuickChatMessages(bb:flatbuffers.ByteBuffer, obj?:QuickChatMessages):QuickChatMessages {
  return (obj || new QuickChatMessages()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param QuickChatMessages= obj
 * @returns QuickChatMessages
 */
static getSizePrefixedRootAsQuickChatMessages(bb:flatbuffers.ByteBuffer, obj?:QuickChatMessages):QuickChatMessages {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QuickChatMessages()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.QuickChat= obj
 * @returns rlbot.flat.QuickChat
 */
messages(index: number, obj?:rlbot.flat.QuickChat):rlbot.flat.QuickChat|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.QuickChat()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
messagesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startQuickChatMessages(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset messagesOffset
 */
static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endQuickChatMessages(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createQuickChatMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset):flatbuffers.Offset {
  QuickChatMessages.startQuickChatMessages(builder);
  QuickChatMessages.addMessages(builder, messagesOffset);
  return QuickChatMessages.endQuickChatMessages(builder);
}
}
}
/**
 * Sent when connecting to RLBot to indicate what type of messages are desired.
 * This could be sent by a bot, or a bot manager governing several bots, an
 * overlay, or any other utility that connects to the RLBot process.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class ReadyMessage {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns ReadyMessage
 */
__init(i:number, bb:flatbuffers.ByteBuffer):ReadyMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ReadyMessage= obj
 * @returns ReadyMessage
 */
static getRootAsReadyMessage(bb:flatbuffers.ByteBuffer, obj?:ReadyMessage):ReadyMessage {
  return (obj || new ReadyMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param ReadyMessage= obj
 * @returns ReadyMessage
 */
static getSizePrefixedRootAsReadyMessage(bb:flatbuffers.ByteBuffer, obj?:ReadyMessage):ReadyMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReadyMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns boolean
 */
wantsBallPredictions():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
wantsQuickChat():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
wantsGameMessages():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startReadyMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean wantsBallPredictions
 */
static addWantsBallPredictions(builder:flatbuffers.Builder, wantsBallPredictions:boolean) {
  builder.addFieldInt8(0, +wantsBallPredictions, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean wantsQuickChat
 */
static addWantsQuickChat(builder:flatbuffers.Builder, wantsQuickChat:boolean) {
  builder.addFieldInt8(1, +wantsQuickChat, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean wantsGameMessages
 */
static addWantsGameMessages(builder:flatbuffers.Builder, wantsGameMessages:boolean) {
  builder.addFieldInt8(2, +wantsGameMessages, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endReadyMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createReadyMessage(builder:flatbuffers.Builder, wantsBallPredictions:boolean, wantsQuickChat:boolean, wantsGameMessages:boolean):flatbuffers.Offset {
  ReadyMessage.startReadyMessage(builder);
  ReadyMessage.addWantsBallPredictions(builder, wantsBallPredictions);
  ReadyMessage.addWantsQuickChat(builder, wantsQuickChat);
  ReadyMessage.addWantsGameMessages(builder, wantsGameMessages);
  return ReadyMessage.endReadyMessage(builder);
}
}
}
/**
 * Notification that a player triggers some in-game event, such as:
 *		Win, Loss, TimePlayed;
 *		Shot, Assist, Center, Clear, PoolShot;
 *		Goal, AerialGoal, BicycleGoal, BulletGoal, BackwardsGoal, LongGoal, OvertimeGoal, TurtleGoal;
 *		AerialHit, BicycleHit, BulletHit, !BackwardsHit, JuggleHit, FirstTouch, BallHit;
 *		Save, EpicSave, FreezeSave;
 *		HatTrick, Savior, Playmaker, MVP;
 *		FastestGoal, SlowestGoal, FurthestGoal, OwnGoal;
 *		MostBallTouches, FewestBallTouches, MostBoostPickups, FewestBoostPickups, BoostPickups;
 *		CarTouches, Demolition, Demolish;
 *		LowFive, HighFive;
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerStatEvent {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerStatEvent
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerStatEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerStatEvent= obj
 * @returns PlayerStatEvent
 */
static getRootAsPlayerStatEvent(bb:flatbuffers.ByteBuffer, obj?:PlayerStatEvent):PlayerStatEvent {
  return (obj || new PlayerStatEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerStatEvent= obj
 * @returns PlayerStatEvent
 */
static getSizePrefixedRootAsPlayerStatEvent(bb:flatbuffers.ByteBuffer, obj?:PlayerStatEvent):PlayerStatEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerStatEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * index of the player associated with the event
 *
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * Event type
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
statType():string|null
statType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
statType(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerStatEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset statTypeOffset
 */
static addStatType(builder:flatbuffers.Builder, statTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, statTypeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerStatEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerStatEvent(builder:flatbuffers.Builder, playerIndex:number, statTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerStatEvent.startPlayerStatEvent(builder);
  PlayerStatEvent.addPlayerIndex(builder, playerIndex);
  PlayerStatEvent.addStatType(builder, statTypeOffset);
  return PlayerStatEvent.endPlayerStatEvent(builder);
}
}
}
/**
 * Notification when the local player is spectating another player.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerSpectate {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerSpectate
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerSpectate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerSpectate= obj
 * @returns PlayerSpectate
 */
static getRootAsPlayerSpectate(bb:flatbuffers.ByteBuffer, obj?:PlayerSpectate):PlayerSpectate {
  return (obj || new PlayerSpectate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerSpectate= obj
 * @returns PlayerSpectate
 */
static getSizePrefixedRootAsPlayerSpectate(bb:flatbuffers.ByteBuffer, obj?:PlayerSpectate):PlayerSpectate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerSpectate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * index of the player that is being spectated. Will be -1 if not spectating anyone.
 *
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerSpectate(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerSpectate(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerSpectate(builder:flatbuffers.Builder, playerIndex:number):flatbuffers.Offset {
  PlayerSpectate.startPlayerSpectate(builder);
  PlayerSpectate.addPlayerIndex(builder, playerIndex);
  return PlayerSpectate.endPlayerSpectate(builder);
}
}
}
/**
 * Rocket League is notifying us that some player has moved their controller. This is an *output*
 *
 * @constructor
 */
export namespace rlbot.flat{
export class PlayerInputChange {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PlayerInputChange
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PlayerInputChange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInputChange= obj
 * @returns PlayerInputChange
 */
static getRootAsPlayerInputChange(bb:flatbuffers.ByteBuffer, obj?:PlayerInputChange):PlayerInputChange {
  return (obj || new PlayerInputChange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PlayerInputChange= obj
 * @returns PlayerInputChange
 */
static getSizePrefixedRootAsPlayerInputChange(bb:flatbuffers.ByteBuffer, obj?:PlayerInputChange):PlayerInputChange {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerInputChange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
playerIndex():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param rlbot.flat.ControllerState= obj
 * @returns rlbot.flat.ControllerState|null
 */
controllerState(obj?:rlbot.flat.ControllerState):rlbot.flat.ControllerState|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new rlbot.flat.ControllerState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns number
 */
dodgeForward():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
dodgeRight():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPlayerInputChange(builder:flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number playerIndex
 */
static addPlayerIndex(builder:flatbuffers.Builder, playerIndex:number) {
  builder.addFieldInt32(0, playerIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset controllerStateOffset
 */
static addControllerState(builder:flatbuffers.Builder, controllerStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, controllerStateOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dodgeForward
 */
static addDodgeForward(builder:flatbuffers.Builder, dodgeForward:number) {
  builder.addFieldFloat32(2, dodgeForward, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dodgeRight
 */
static addDodgeRight(builder:flatbuffers.Builder, dodgeRight:number) {
  builder.addFieldFloat32(3, dodgeRight, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPlayerInputChange(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createPlayerInputChange(builder:flatbuffers.Builder, playerIndex:number, controllerStateOffset:flatbuffers.Offset, dodgeForward:number, dodgeRight:number):flatbuffers.Offset {
  PlayerInputChange.startPlayerInputChange(builder);
  PlayerInputChange.addPlayerIndex(builder, playerIndex);
  PlayerInputChange.addControllerState(builder, controllerStateOffset);
  PlayerInputChange.addDodgeForward(builder, dodgeForward);
  PlayerInputChange.addDodgeRight(builder, dodgeRight);
  return PlayerInputChange.endPlayerInputChange(builder);
}
}
}
/**
 * @constructor
 */
export namespace rlbot.flat{
export class GameMessageWrapper {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns GameMessageWrapper
 */
__init(i:number, bb:flatbuffers.ByteBuffer):GameMessageWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameMessageWrapper= obj
 * @returns GameMessageWrapper
 */
static getRootAsGameMessageWrapper(bb:flatbuffers.ByteBuffer, obj?:GameMessageWrapper):GameMessageWrapper {
  return (obj || new GameMessageWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameMessageWrapper= obj
 * @returns GameMessageWrapper
 */
static getSizePrefixedRootAsGameMessageWrapper(bb:flatbuffers.ByteBuffer, obj?:GameMessageWrapper):GameMessageWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameMessageWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns rlbot.flat.GameMessage
 */
MessageType():rlbot.flat.GameMessage {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : rlbot.flat.GameMessage.NONE;
};

/**
 * @param flatbuffers.Table obj
 * @returns ?flatbuffers.Table
 */
Message<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGameMessageWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param rlbot.flat.GameMessage MessageType
 */
static addMessageType(builder:flatbuffers.Builder, MessageType:rlbot.flat.GameMessage) {
  builder.addFieldInt8(0, MessageType, rlbot.flat.GameMessage.NONE);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset MessageOffset
 */
static addMessage(builder:flatbuffers.Builder, MessageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, MessageOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGameMessageWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createGameMessageWrapper(builder:flatbuffers.Builder, MessageType:rlbot.flat.GameMessage, MessageOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameMessageWrapper.startGameMessageWrapper(builder);
  GameMessageWrapper.addMessageType(builder, MessageType);
  GameMessageWrapper.addMessage(builder, MessageOffset);
  return GameMessageWrapper.endGameMessageWrapper(builder);
}
}
}
/**
 * We have some very small messages that are only a few bytes but potentially sent at high frequency.
 * Bundle them into a packet to reduce the overhead of sending data over TCP.
 *
 * @constructor
 */
export namespace rlbot.flat{
export class MessagePacket {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns MessagePacket
 */
__init(i:number, bb:flatbuffers.ByteBuffer):MessagePacket {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MessagePacket= obj
 * @returns MessagePacket
 */
static getRootAsMessagePacket(bb:flatbuffers.ByteBuffer, obj?:MessagePacket):MessagePacket {
  return (obj || new MessagePacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param MessagePacket= obj
 * @returns MessagePacket
 */
static getSizePrefixedRootAsMessagePacket(bb:flatbuffers.ByteBuffer, obj?:MessagePacket):MessagePacket {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MessagePacket()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param rlbot.flat.GameMessageWrapper= obj
 * @returns rlbot.flat.GameMessageWrapper
 */
messages(index: number, obj?:rlbot.flat.GameMessageWrapper):rlbot.flat.GameMessageWrapper|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new rlbot.flat.GameMessageWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
messagesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
gameSeconds():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
frameNum():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMessagePacket(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset messagesOffset
 */
static addMessages(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messagesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMessagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMessagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number gameSeconds
 */
static addGameSeconds(builder:flatbuffers.Builder, gameSeconds:number) {
  builder.addFieldFloat32(1, gameSeconds, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number frameNum
 */
static addFrameNum(builder:flatbuffers.Builder, frameNum:number) {
  builder.addFieldInt32(2, frameNum, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMessagePacket(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createMessagePacket(builder:flatbuffers.Builder, messagesOffset:flatbuffers.Offset, gameSeconds:number, frameNum:number):flatbuffers.Offset {
  MessagePacket.startMessagePacket(builder);
  MessagePacket.addMessages(builder, messagesOffset);
  MessagePacket.addGameSeconds(builder, gameSeconds);
  MessagePacket.addFrameNum(builder, frameNum);
  return MessagePacket.endMessagePacket(builder);
}
}
}
